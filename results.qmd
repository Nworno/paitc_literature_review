---
title: "results_stats"
format: html
---

```{r config knitr}
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(error = FALSE)
knitr::opts_chunk$set(message = FALSE)

knitr::opts_chunk$set(fig.width = 12)
knitr::opts_chunk$set(fig.height = 8)
```


```{r}
library(readr)
library(stringr)
library(dplyr)
library(tidyr)
library(tibble)
library(purrr)
library(lubridate)
library(ggthemr)
library(arsenal)
library(flextable)

source("R_snippets.R")
ggthemr::ggthemr("fresh")
```


```{r}
all_articles_info <- read_csv("data/articles_selection/all_articles_info.csv", col_types = cols(.default = "c"))
all_articles_id <- read_csv("data/articles_selection/articles_id.csv", col_types = cols(.default = "c"))
# extraction_list <- read_csv("data/articles_selection/included_articles_after_review.csv", col_types = cols(.default = "c)))
flow_chart_df <- read_csv("data/to_use_for_stats/flow_chart.csv", col_types = cols(included = "l",
                                                                                   full_article = "l",
                                                                                   third = "l",
                                                                                   during_extraction = "l",
                                                                                   .default = "c"))
results_df <- read_tsv("data/to_use_for_stats/long_results_final.tsv", col_types = cols(.default = "c"))
ttt_mapped <- read_tsv("data/to_use_for_stats/decision_atc_mapped.tsv", col_types = cols(.default = "c", car_t_cells = "l"))
conditions_mapped <- read_tsv("data/to_use_for_stats/decision_icd_mapped.tsv", col_types = cols(.default = "c"))
```


```{r}
source("questions_sections.R")
methodology_questions <- questions_sections$methodology %>% unname()
```


```{r}
# selection articles ---------------------------------------------------------
all_articles_id <- all_articles_id %>%
  mutate(DOI = tolower(DOI)) %>%
  rename(doi = DOI)
included_articles <- filter(flow_chart_df, included)

results_df <- left_join(results_df, all_articles_id[, c("doi", "PMID")], by = "doi")

# 12 articles manquants, voir une fois qu'on aura tous les articles avec Jérôme
# pour l'instant ne fonctionne pas car manque les articles à adjudiquer par Jérôme
# stopifnot(identical(
#   unique(included_articles$PMID)[order(unique(included_articles$PMID))],
#   unique(results_df$PMID)[order(unique(results_df$PMID))]
# ))

included_articles_info <- semi_join(all_articles_info, included_articles, by = "PMID")
```

```{r}
general_information_df <- results_df[results_df$section == "general_information",]
individual_study_df <- results_df[results_df$section == "individual_study",]
paitc_results <- results_df[results_df$section %in% c("methodology", "results"), ]
```


# Articles general Information

TODO: rajouter IF
```{r Publication journals}
## Authors specific affiliations would need to be parsed and retrieved through pubv1_info.txt --> regex looking at ". " preceded by a ", " or "^"
included_articles_info %>%
  mutate("journal_title" = JT,
         "journal_title_short" = TA) %>%
  group_by(journal_title_short) %>%
  summarise(count = n()) %>%
  arrange(desc(count)) %>%
  ggplot(aes(x = reorder(journal_title_short, count), y = count)) +
  geom_bar(stat = "identity") +
  theme(axis.text.y = element_text(size = 7)) +
  scale_x_discrete() +
  coord_flip() +
  labs(title = "Publication journals",
       x = "Journals",
       y = "Articles count")
```


```{r Publication date}
## Publication dates
publication_date_df <- included_articles_info %>%
  select(EDAT) %>%
  mutate(publication_date = as_date(EDAT, format = "%Y/%m/%d %H:%M"),
         publication_year = year(publication_date),
         publication_date_q = lubridate::quarter(publication_date, with_year = TRUE),
         publication_date_s = lubridate::semester(publication_date, with_year = TRUE),
         publication_date_s = ifelse(round(publication_date_s %% 0.2, 1) == 0.1,
                                      trunc(publication_date_s),
                                      trunc(publication_date_s) + 0.5))


publication_date_df %>%
  filter(publication_year < 2022) %>%
  group_by(publication_year) %>%
  summarise(count = n()) %>%
  ggplot(aes(x = publication_year, y = count)) +
  geom_point() +
  geom_line() +
  geom_text(aes(label = count), nudge_y = 2.5, nudge_x = -0.05) +
  scale_x_continuous(breaks = 2010:2022) +
  labs(title = "MAIC/STC implementation: publications by years",
       x = "Year",
       y = "Publication counts")
```
```{r Intervals between articles received and accepted}
publication_dates_df <- included_articles_info %>% mutate(
  received_date = str_extract(PHST, "[^\\].]+(?=\\[received\\])") %>% str_trim() %>% as_datetime(format = "%Y/%m/%d %H:%M"),
  accepted_date = str_extract(PHST, "[^\\].]+(?=\\[accepted\\])") %>% str_trim() %>% as_datetime(format = "%Y/%m/%d %H:%M"),
  pubmed_date = str_extract(PHST, "[^\\].]+(?=\\[pubmed\\])") %>% str_trim() %>% as_datetime(format = "%Y/%m/%d %H:%M"), 
  time_acceptation = accepted_date - received_date, 
  time_publication_pubmed = pubmed_date - received_date
) %>% 
  select(PHST, received_date, accepted_date, time_acceptation, time_publication_pubmed, pubmed_date, PMID, PT, TA, PL, JT)

publication_dates_df %>% 
  pivot_longer(cols = c(time_acceptation, time_publication_pubmed), names_to = "time_type", values_to = "time") %>% 
  mutate(time = time/30.5) %>% 
  ggplot(aes(x = time)) + 
  facet_wrap(~ time_type) +
  geom_histogram() + 
  labs(x = "Time in months", "publication count", 
       title = "Time between submission and acceptation")
```
## Medical conditions

```{r fig.width=16}
conditions_df <- general_information_df %>% 
  filter(questions == "Medical Condition of Interest Name") %>% 
  left_join(conditions_mapped, by = c("answer" = "condition_name"))

stopifnot(!any(is.na(conditions_df$`concept_name_ICD10 Chapter`)))

ggplot(conditions_df, aes(x = `concept_name_ICD10 Hierarchy`)) + 
  geom_bar() +
  coord_flip()

ggplot(conditions_df, aes(x = `concept_name_ICD10 Chapter`)) + 
  geom_bar() +
  coord_flip()
#TODO: reprendre d'ici, améliorer ces figures et passer à la suite 

```


```{r Results}
## Results

results_wide <- paitc_results %>%
  filter(section == "results") %>%
  pivot_wider(id_cols = c(doi, PMID, n_itc), names_from = questions, values_from = answer) %>%
  mutate(across(where(is.character), .fns = as.factor))

with(results_wide, table(n_itc))
distinct(results_wide, doi, n_itc) %>% dim()


results_wide %>%
  names()
## Checks
results_wide %>%
  summarise(across(.fns = ~ sum(is.na(.x)))) %>%
  pivot_longer(cols = everything()) %>%
  View()

results_wide %>%
  select(all_of(methodology_questions)) %>%
  tableby(as.formula("`Type of population-adjusted indirect comparisons performed` ~ ."),
          data = .) %>%
  summary() %>%
  as.data.frame() %>%
  flextable() %>%
  print(preview = "docx")
  save_as_html(path = "test.html")






```

```{r}
# ggtheme setting ---------------------------------------------------------
ggthemr::ggthemr("fresh")
```

```{r}
# list_questions ----------------------------------------------------------
source("questions_sections.R")
methodology_questions <- questions_sections$methodology %>% unname()
```


```{r}
# selection articles ---------------------------------------------------------
included_articles <- filter(flow_chart_df, included)

stopifnot(identical(
  unique(included_articles$PMID)[order(unique(included_articles$PMID))],
  unique(results_df$PMID)[order(unique(results_df$PMID))]
))


# joins -------------------------------------------------------------------

included_articles_info <- semi_join(all_articles_info, included_articles, by = "PMID")


# articles metadata -------------------------------------------------------

## Authors specific affiliations would need to be parsed and retrieved through pubv1_info.txt --> regex looking at ". " preceded by a ", " or "^"
included_articles_info %>%
  mutate("journal_title" = JT,
         "journal_title_short" = TA) %>%
  group_by(journal_title_short) %>%
  summarise(count = n()) %>%
  arrange(desc(count)) %>%
  ggplot(aes(x = reorder(journal_title_short, count), y = count)) +
  geom_bar(stat = "identity") +
  theme(axis.text.y = element_text(size = 7)) +
  scale_x_discrete() +
  coord_flip() +
  labs(title = "Publication journals",
       x = "Journals",
       y = "Articles count")

## Publication dates
publication_date_df <- included_articles_info %>%
  select(EDAT) %>%
  mutate(publication_date = as_date(EDAT, format = "%Y/%m/%d %H:%M"),
         publication_year = year(publication_date),
         publication_date_q = lubridate::quarter(publication_date, with_year = TRUE),
         publication_date_s = lubridate::semester(publication_date, with_year = TRUE),
         publication_date_s = ifelse(round(publication_date_s %% 0.2, 1) == 0.1,
                                      trunc(publication_date_s),
                                      trunc(publication_date_s) + 0.5))
publication_date_df %>%
  group_by(publication_date_s) %>%
  summarise(count = n()) %>%
  ggplot(aes(x = publication_date_s, y = count)) +
  geom_point() +
  geom_line() +
  scale_x_continuous(breaks = 2010:2022) +
  labs(title = "Publications by semester",
       x = "Date",
       y = "Publication counts")

publication_date_df %>%
  filter(publication_year < 2022) %>%
  group_by(publication_year) %>%
  summarise(count = n()) %>%
  ggplot(aes(x = publication_year, y = count)) +
  geom_point() +
  geom_line() +
  geom_text(aes(label = count), nudge_y = 2.5, nudge_x = -0.05) +
  scale_x_continuous(breaks = 2010:2022) +
  labs(title = "MAIC/STC implementation: publications by years",
       x = "Year",
       y = "Publication counts")

## Results

general_information_df <- results_df[results_df$section == "general_information",]
individual_study_df <- results_df[results_df$section == "individual_study",]
paitc_results <- results_df[results_df$section %in% c("methodology", "results"), ]


results_wide <- paitc_results %>%
  pivot_wider(id_cols = c(doi, PMID, `ITC num`), names_from = questions, values_from = answer) %>%
  mutate(across(where(is.character), .fns = as.factor))


## Checks
results_wide %>%
  summarise(across(.fns = ~ sum(is.na(.x)))) %>%
  pivot_longer(cols = everything()) %>%
  View()
```


```{r results='asis'}
results_wide %>%
  select(all_of(methodology_questions)) %>%
  tableby(as.formula("`Type of population-adjusted indirect comparisons performed` ~ ."),
          data = .) %>%
  summary()
```

