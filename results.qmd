---
title: "results_stats"
format: html
---

```{r config knitr, echo=FALSE}
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(error = FALSE)
knitr::opts_chunk$set(message = FALSE)

knitr::opts_chunk$set(fig.width = 12)
knitr::opts_chunk$set(fig.height = 8)
```


```{r}
library(readr)
library(stringr)
library(dplyr)
library(tidyr)
library(tibble)
library(purrr)
library(lubridate)
library(ggthemr)
library(arsenal)
library(flextable)

source("R_snippets.R")
ggthemr::ggthemr("fresh")
```


```{r}
all_articles_info <- read_csv("data/articles_selection/all_articles_info.csv", col_types = cols(.default = "c"))
all_articles_id <- read_csv("data/articles_selection/articles_id.csv", col_types = cols(.default = "c"))
# extraction_list <- read_csv("data/articles_selection/included_articles_after_review.csv", col_types = cols(.default = "c)))
flow_chart_df <- read_csv("data/to_use_for_stats/flow_chart.csv", col_types = cols(included = "l",
                                                                                   full_article = "l",
                                                                                   third = "l",
                                                                                   during_extraction = "l",
                                                                                   .default = "c"))
results_df <- read_tsv("data/to_use_for_stats/long_results_final.tsv", col_types = cols(.default = "c"))
ttt_mapped <- read_tsv("data/to_use_for_stats/decision_atc_mapped.tsv", col_types = cols(.default = "c", car_t_cells = "l"))
conditions_mapped <- read_tsv("data/to_use_for_stats/decision_icd_mapped.tsv", col_types = cols(.default = "c"))
```


```{r}
source("questions_sections.R")
methodology_questions <- questions_sections$methodology %>% unname()
```


```{r}
# selection articles ---------------------------------------------------------
all_articles_id <- all_articles_id %>%
  mutate(DOI = tolower(DOI)) %>%
  rename(doi = DOI)
included_articles <- filter(flow_chart_df, included)

results_df <- left_join(results_df, all_articles_id[, c("doi", "PMID")], by = "doi")

# 12 articles manquants, voir une fois qu'on aura tous les articles avec Jérôme
# pour l'instant ne fonctionne pas car manque les articles à adjudiquer par Jérôme
# stopifnot(identical(
#   unique(included_articles$PMID)[order(unique(included_articles$PMID))],
#   unique(results_df$PMID)[order(unique(results_df$PMID))]
# ))

included_articles_info <- semi_join(all_articles_info, included_articles, by = "PMID")
```

```{r Discarding xx answers}

results_df <- results_df %>% 
  filter(!answer == "xx") %>% 
  #TODO: check these NAs upstream
  filter(!is.na(answer))

```


```{r Creating section data frames}
general_information_df <- results_df[results_df$section == "general_information",]
individual_study_df <- results_df[results_df$section == "study_information",]
paitc_results <- results_df[results_df$section %in% c("methodology", "results"), ]
```


# Articles general Information

```{r}
general_information_df <- general_information_df %>% 
  select(-n_itc, -study_number, -section, -PMID) %>% 
  select(answer, everything())
```

## Journals

```{r Publication journals, fig.height=18}
#TODO: rajouter IF
## Authors specific affiliations would need to be parsed and retrieved through pubv1_info.txt --> regex looking at ". " preceded by a ", " or "^"
included_articles_info %>%
  mutate("journal_title" = JT,
         "journal_title_short" = TA) %>%
  group_by(journal_title_short) %>%
  summarise(count = n()) %>%
  arrange(desc(count)) %>%
  ggplot(aes(x = reorder(journal_title_short, count), y = count, label = count)) +
  geom_bar(stat = "identity") +
  geom_label() + 
  theme(axis.text.y = element_text(size = 12)) +
  scale_x_discrete() +
  coord_flip() +
  labs(title = "Publication journals",
       x = "Journals",
       y = "Articles count")
```


```{r Publication date}
## Publication dates
publication_date_df <- included_articles_info %>%
  select(EDAT) %>%
  mutate(publication_date = as_date(EDAT, format = "%Y/%m/%d %H:%M"),
         publication_year = year(publication_date),
         publication_date_q = lubridate::quarter(publication_date, with_year = TRUE),
         publication_date_s = lubridate::semester(publication_date, with_year = TRUE),
         publication_date_s = ifelse(round(publication_date_s %% 0.2, 1) == 0.1,
                                      trunc(publication_date_s),
                                      trunc(publication_date_s) + 0.5))


publication_date_df %>%
  filter(publication_year < 2022) %>%
  group_by(publication_year) %>%
  summarise(count = n()) %>%
  ggplot(aes(x = publication_year, y = count)) +
  geom_point() +
  geom_line() +
  geom_text(aes(label = count), nudge_y = 2.5, nudge_x = -0.05) +
  scale_x_continuous(breaks = 2010:2022) +
  labs(title = "MAIC/STC implementation: publications by years",
       x = "Year",
       y = "Publication counts")
```
```{r Intervals between articles received and accepted}
publication_dates_df <- included_articles_info %>% mutate(
  received_date = str_extract(PHST, "[^\\].]+(?=\\[received\\])") %>% str_trim() %>% as_datetime(format = "%Y/%m/%d %H:%M"),
  accepted_date = str_extract(PHST, "[^\\].]+(?=\\[accepted\\])") %>% str_trim() %>% as_datetime(format = "%Y/%m/%d %H:%M"),
  pubmed_date = str_extract(PHST, "[^\\].]+(?=\\[pubmed\\])") %>% str_trim() %>% as_datetime(format = "%Y/%m/%d %H:%M"), 
  time_acceptation = accepted_date - received_date, 
  time_publication_pubmed = pubmed_date - received_date
) %>% 
  select(PHST, received_date, accepted_date, time_acceptation, time_publication_pubmed, pubmed_date, PMID, PT, TA, PL, JT)

publication_dates_df %>% 
  pivot_longer(cols = c(time_acceptation, time_publication_pubmed), names_to = "time_type", values_to = "time") %>% 
  mutate(time = time/30.5) %>% 
  ggplot(aes(x = time)) + 
  facet_wrap(~ time_type) +
  geom_histogram() + 
  labs(x = "Time in months", "publication count", 
       title = "Time between submission and acceptation")
```
## Authors' affiliations

```{r Authors affiliations}
authors_affiliation_df <- general_information_df %>% 
  filter(questions == "Positions of study investigators (for any authors of the article, any that applies)") %>%
  # Manually correcting variation introduced during the review process 
  mutate(answer = if_else(answer == "Academic, Private Data Analysis Company, Pharmaceutical Industry",
                         "Academic, Pharmaceutical Industry, Private Data Analysis Company",
                         answer)) %>%
  select(doi, answer) %>% 
  mutate(positions = str_split(answer, ", ")) %>% 
  unnest(positions)
```


```{r }
authors_affiliation_df %>% 
  distinct(doi, answer) %>% 
  count(answer) %>% {
  ggplot(., aes(x = answer, y = n)) +
  geom_bar(stat = "identity") +
  geom_label(aes(label = n), 
             position = position_stack(vjust = 0.5)) + 
  coord_flip() + 
  scale_x_discrete(limits = rev(.$answer)) +
  labs(x = NULL, y = "Articles count", title = "Authors' positions") +
  theme(axis.text.y = element_text(size = 8))
}
```


```{r}
authors_affiliation_df %>% 
  group_by(positions) %>% 
  summarise(counts = n()) %>% 
  ggplot(aes(x = positions, y = counts)) +
  geom_bar(stat = "identity") +
  geom_label(aes(y = 150, label = counts),
             position = position_stack(vjust = 0.5),
             color = "black",
             show.legend = FALSE) + 
  labs(title = "Authors' positions",
       subtitle = "At least one author affiliated with: ", 
       y = "Articles count", 
       x = "Positions")
```


```{r }
authors_affiliation_df %>% 
  mutate(counter = TRUE) %>% 
  pivot_wider(names_from = positions, values_from = counter, values_fill = FALSE) %>% 
  mutate(collaboration = Academic & `Pharmaceutical Industry`) %>% 
  count(collaboration) %>% 
  ggplot(aes(x = collaboration, y = n)) + 
  geom_bar(stat = "identity") + 
  geom_label(aes(label = n, y = 30)) +
  scale_x_discrete(labels = c(`FALSE` = "No collaboration", `TRUE` = "Collaboration")) +
  labs(x = NULL, 
       y = "Articles count", 
       title = "Academics/Pharmaceutical Collaborations")
```

### First and last authors positions

```{r}
general_information_df %>% 
  mutate(answer = ifelse(tolower(answer) %in% c("usa", "uk"),
                         str_to_upper(answer),
                         str_to_title(answer))) %>% 
  filter(questions %in% c("Countries of first author affiliations", "Countries of last author affiliations")) %>% 
  count(questions, answer) %>%
  ggplot(aes(x = reorder(answer, n), y = n)) + 
  geom_bar(stat = "identity") + 
  facet_grid(" ~ questions") + 
  coord_flip() + 
  labs(title = "Countries", 
       x = NULL, 
       y = "Article count")
  
```

## Methodology departments


```{r}
general_information_df %>% 
  filter(questions == "At least one author affiliated with a department of Biostatistics, Epidemiology, Public Health, Pharmacoepidemiology, or a Clinical Research unit, or private data analysis company") %>% 
  count(answer) %>% 
  ggplot(aes(x = answer, y = n, label = n)) +
  geom_bar(stat = "identity") +
  geom_label() +
  labs(x = "Affiliation with a methodology department/data-analysis company", 
       title = "Involvement of a Methodology department/data-analysis company", 
       y = "Count")
```

## Fundings

```{r}
general_information_df %>% 
  filter(questions == "Mentioned sources of funding") %>% 
  count(answer) %>% 
  ggplot(aes(x = answer, y = n, label = n)) +
  geom_bar(stat = "identity") +
  geom_label() +
  coord_flip() + 
  labs(x = NULL,
       title = "Mentioned of source of fundings", 
       y = "Count")
```


## Investigated medical conditions

```{r fig.width=12}
conditions_df <- general_information_df %>% 
  filter(questions == "Medical Condition of Interest Name") %>% 
  left_join(conditions_mapped, by = c("answer" = "condition_name"))
# conditions_df
stopifnot(!any(is.na(conditions_df$`concept_name_ICD10 Chapter`)))
```


```{r fig.width=12, fig.height=10}
conditions_df %>% 
  count(`concept_name_ICD10 Hierarchy`, `concept_code_ICD10 Hierarchy`) %>% 
  mutate(across(where(is.character), as.factor)) %>% 
  ggplot(aes(x = reorder(`concept_name_ICD10 Hierarchy`, as.numeric(`concept_code_ICD10 Hierarchy`)),
             y = n, 
             label = n)
  ) + 
  geom_bar(stat = "identity") +
  geom_label() + 
  coord_flip() +
  scale_y_discrete() + 
  labs(x = NULL, 
       y = "Articles count", 
       title = "Investigated Condition", 
       subtitle = "By ICD-10 Subchapter")

```


```{r fig.width=12}
conditions_df %>% 
  count(`concept_name_ICD10 Chapter`, `concept_code_ICD10 Chapter`) %>% 
  mutate(across(where(is.character), as.factor)) %>% 
  ggplot(aes(x = reorder(`concept_name_ICD10 Chapter`, as.numeric(`concept_code_ICD10 Chapter`)),
             y = n, 
             label = n)
  ) + 
  geom_bar(stat = "identity") +
  geom_label() + 
  coord_flip() + 
  labs(x = NULL, 
       y = "Articles count", 
       title = "Investigated condition", 
       subtitle = "By ICD-10 Chapter")

```

# Results

```{r}
wide_methodo_results <- paitc_results %>% 
  pivot_wider(id_cols = c(doi, n_itc), names_from = questions, values_from = answer)
```



```{r data management to determine IPD/nonIPD treatments}
ttt_ipd_df <- paitc_results %>% 
  select(doi, section, n_itc, questions, answer) %>% 
  filter(str_detect(questions,
                    pattern = c("(Treatment name)|(Study 'number\\(s\\)' for treatment)"))) %>% 
  separate(questions, into = c("questions", "treatment number"), 
           sep = "\\s(?=\\d$)"
  ) %>% 
  pivot_wider(names_from = questions, 
              values_from = answer) %>% 
  mutate(`Study 'number(s)' for treatment` = str_split(`Study 'number(s)' for treatment`, ";")) %>% 
  unnest_longer(`Study 'number(s)' for treatment`) %>% 
  left_join(individual_study_df %>% 
              filter(questions == "Patient-level data used") %>% 
              pivot_wider(names_from = questions, values_from = answer) %>% 
              rename(IPD = `Patient-level data used`) %>% 
              select(doi, study_number, IPD), 
            by = c("doi" = "doi", "Study 'number(s)' for treatment" = "study_number")
  )

stopifnot(
  "Some combinations of doi-n_itc-treatment must be assigned both IPD and non IPD" = nrow(distinct(ttt_ipd_df, doi, `treatment number`, n_itc, `Treatment name`, IPD)) == nrow(distinct(ttt_ipd_df, doi, n_itc, IPD))
)

```


### Treatments
```{r, fig.height = 18}

ttt_ipd_df %>% 
  mutate(IPD = tolower(IPD) %>% factor(levels = c("yes", "no"))) %>% 
  #TODO: fix the NA issue
  filter(!is.na(IPD)) %>% 
  distinct(doi, n_itc, `treatment number`, `Treatment name`, IPD) %>% 
  left_join(distinct(ttt_mapped[, c("decision", "first", "second", "third", "car_t_cells")]),
            by = c("Treatment name" = "decision")) %>%
  group_by(IPD) %>% 
  count(first) %>% 
  ggplot(aes(x = reorder(first, n), y = n, label = n)) +
  geom_bar(stat = "identity") +
  geom_label() +
  coord_flip() +
  facet_wrap(c("IPD"), labeller = labeller("IPD" = c("no" = "Non IPD", "yes" = "IPD"))) +
  labs(title = "Treatments compared", 
       subtitle = "ATC classification level 2") +
  theme(axis.text = element_text(size = 16), 
        strip.text = element_text(size = 18), 
        plot.title = element_text(size = 22), 
        plot.subtitle = element_text(size = 20))
```


## Individual studies 

```{r, results='asis'}

individual_studies_questions <- c(
  "Patient-level data used", 
  "Clinical Trial", 
  "Country where the clinical trial/observational study was conducted (international if more than one)",
  "Phase of the clinical trial (clinical trial only)", 
  "Number of treatment arms (clinical trial only)"
)

individual_study_df %>% 
  mutate(answer = str_to_title(answer)) %>% 
  pivot_wider(names_from = questions, values_from = answer) %>% 
  select(all_of(individual_studies_questions)) %>% 
  tableby(`Patient-level data used` ~ ., data = .) %>% 
  summary()
```

### Methodology statistics per article

```{r, results='asis'}
# results at the article level: eg "at least one ... per article"
wide_methodo_results %>% 
  group_by(doi) %>% 
  # to fix the few cases where max(n_itc) isn't the number of comparisons performed
  summarise(count_comparisons = n(), 
            at_least_one_maic = any(`Type of population-adjusted indirect comparisons performed` == "MAIC"), 
            at_least_one_stc = any(`Type of population-adjusted indirect comparisons performed` == "STC"),
            at_least_other_paitc = any(!`Type of population-adjusted indirect comparisons performed` %in% c("MAIC", "STC")), 
            ) %>% 
  select(-doi) %>% 
  `labels<-`(c(
    "count_comparisons"    = "PAITC count (per article)",
    "at_least_one_maic"    = "At least one MAIC in the article", 
    "at_least_one_stc"     = "At least one STC in the article", 
    "at_least_other_paitc" = "At least one other PAITC")) %>% 
  tableby( ~ ., data = .) %>% 
  summary() 
```

## Methodology per comparisons

```{r}
list_questions_methodo <- c(
  "Type of population-adjusted indirect comparisons performed" = "Type of population-adjusted indirect comparisons performed",
  "Anchored comparison?" = "Anchored comparison?",
  "Form of the indirect comparison" = "Form of the indirect comparison",
  "Definition of a single primary outcome for the indirect comparison" = "Definition of a single primary outcome for the indirect comparison",
  # "Primary Outcome Name (first one mentioned in the text of the results part if no primary outcome defined)" = "Primary Outcome Name (first one mentioned in the text of the results part if no primary outcome defined)", #TODO --> non UTF8 characther somewhere, to be fixed
  "Primary outcome: variable type" = "Primary outcome: variable type",
  "Justification for selecting variables to be included in the adjustment model (in the main text)" = "Justification for selecting variables to be included in the adjustment model (in the main text)",
  "Inclusion of prognostic factors in the adjustment/matching model" = "Inclusion of prognostic factors in the adjustment/matching model",
  "Inclusion of treatment-effect modifiers in the adjustment/matching model" = "Inclusion of treatment-effect modifiers in the adjustment/matching model",
  "Mention of the MAIC weights estimation model / STC adjustment model details in the main text **or supplemental materials** (ie matching on first moment, second moment, including interaction term, etc)" = "Mention of the MAIC weights estimation model / STC adjustment model details in the main text **or supplemental materials** (ie matching on first moment, second moment, including interaction term, etc)",
  "Discussion of the choice of the scale for the outcome in the main text (ie natural outcome scale vs transformed outcome scale)" = "Discussion of the choice of the scale for the outcome in the main text (ie natural outcome scale vs transformed outcome scale)"
)
```

```{r DM Variables selection}

wide_methodo <- paitc_results %>% 
  filter(section == "methodology") %>% 
  pivot_wider(id_cols = c(doi, PMID, n_itc), names_from = questions, values_from = answer)


wide_methodo %>% 
  mutate(`Justification for selecting variables to be included in the adjustment model (in the main text)` = 
           str_split(`Justification for selecting variables to be included in the adjustment model (in the main text)`, ",")) %>% 
  unnest_longer(`Justification for selecting variables to be included in the adjustment model (in the main text)`) %>% 
  pivot_wider(names_from = )
            
```



```{r}
wide_methodo %>%
  select(all_of(list_questions_methodo)) %>% 
  tableby(list(`Type of population-adjusted indirect comparisons performed`,
               `Anchored comparison?`) ~ ., data = .) %>% 
  summary()
```


```{r Results, eval=FALSE}
results_wide <- paitc_results %>%
  filter(section == "results") %>%
  pivot_wider(id_cols = c(doi, PMID, n_itc), names_from = questions, values_from = answer) %>%
  mutate(across(where(is.character), .fns = as.factor))

# with(results_wide, table(n_itc))
# distinct(results_wide, doi, n_itc) %>% dim()
# 
# 
# results_wide %>%
#   names()
## Checks
# results_wide %>%
#   summarise(across(.fns = ~ sum(is.na(.x)))) %>%
#   pivot_longer(cols = everything()) %>%
#   View()

results_wide %>%
  select(any_of(methodology_questions)) %>%
  tableby(as.formula("`Type of population-adjusted indirect comparisons performed` ~ ."),
          data = .) %>%
  summary() %>%
  as.data.frame() %>%
  flextable()

```



```{r, results='asis', eval=FALSE}
wide_results %>% 
  select(all_of(list_questions_methodo)) %>% 
  tableby( ~ ., data = .) %>% 
  summary()
```


```{r}
# list_questions ----------------------------------------------------------
source("questions_sections.R")
methodology_questions <- questions_sections$methodology %>% unname()
```


```{r, eval=FALSE}
# selection articles ---------------------------------------------------------
included_articles <- filter(flow_chart_df, included)

stopifnot(identical(
  unique(included_articles$PMID)[order(unique(included_articles$PMID))],
  unique(results_df$PMID)[order(unique(results_df$PMID))]
))


# joins -------------------------------------------------------------------

included_articles_info <- semi_join(all_articles_info, included_articles, by = "PMID")


# articles metadata -------------------------------------------------------

## Authors specific affiliations would need to be parsed and retrieved through pubv1_info.txt --> regex looking at ". " preceded by a ", " or "^"
included_articles_info %>%
  mutate("journal_title" = JT,
         "journal_title_short" = TA) %>%
  group_by(journal_title_short) %>%
  summarise(count = n()) %>%
  arrange(desc(count)) %>%
  ggplot(aes(x = reorder(journal_title_short, count), y = count)) +
  geom_bar(stat = "identity") +
  theme(axis.text.y = element_text(size = 7)) +
  scale_x_discrete() +
  coord_flip() +
  labs(title = "Publication journals",
       x = "Journals",
       y = "Articles count")

## Publication dates
publication_date_df <- included_articles_info %>%
  select(EDAT) %>%
  mutate(publication_date = as_date(EDAT, format = "%Y/%m/%d %H:%M"),
         publication_year = year(publication_date),
         publication_date_q = lubridate::quarter(publication_date, with_year = TRUE),
         publication_date_s = lubridate::semester(publication_date, with_year = TRUE),
         publication_date_s = ifelse(round(publication_date_s %% 0.2, 1) == 0.1,
                                      trunc(publication_date_s),
                                      trunc(publication_date_s) + 0.5))
publication_date_df %>%
  group_by(publication_date_s) %>%
  summarise(count = n()) %>%
  ggplot(aes(x = publication_date_s, y = count)) +
  geom_point() +
  geom_line() +
  scale_x_continuous(breaks = 2010:2022) +
  labs(title = "Publications by semester",
       x = "Date",
       y = "Publication counts")

publication_date_df %>%
  filter(publication_year < 2022) %>%
  group_by(publication_year) %>%
  summarise(count = n()) %>%
  ggplot(aes(x = publication_year, y = count)) +
  geom_point() +
  geom_line() +
  geom_text(aes(label = count), nudge_y = 2.5, nudge_x = -0.05) +
  scale_x_continuous(breaks = 2010:2022) +
  labs(title = "MAIC/STC implementation: publications by years",
       x = "Year",
       y = "Publication counts")

## Results

general_information_df <- results_df[results_df$section == "general_information",]
individual_study_df <- results_df[results_df$section == "individual_study",]
paitc_results <- results_df[results_df$section %in% c("methodology", "results"), ]


results_wide <- paitc_results %>%
  pivot_wider(id_cols = c(doi, PMID, `ITC num`), names_from = questions, values_from = answer) %>%
  mutate(across(where(is.character), .fns = as.factor))


## Checks
# results_wide %>%
#   summarise(across(.fns = ~ sum(is.na(.x)))) %>%
#   pivot_longer(cols = everything()) %>%
#   View()
```


```{r results='asis', eval=FALSE}
results_wide %>%
  select(all_of(methodology_questions)) %>%
  tableby(as.formula("`Type of population-adjusted indirect comparisons performed` ~ ."),
          data = .) %>%
  summary()
```

