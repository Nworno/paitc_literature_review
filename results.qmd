---
title: "PAITC Systematic Review Results"
format: pdf
---

```{r config knitr, echo=FALSE}
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(error = FALSE)
knitr::opts_chunk$set(message = FALSE)

knitr::opts_chunk$set(fig.width = 12)
knitr::opts_chunk$set(fig.height = 8)
```


```{r}
library(readr)
library(stringr)
library(dplyr)
library(tidyr)
library(tibble)
library(purrr)
library(lubridate)
library(ggthemr)
library(arsenal)
library(flextable)
library(forcats)

source("R_snippets.R")
ggthemr::ggthemr("fresh")
```

```{r}
tableby2word <- function(tableby_obj, path, ...) {
  # because for some reason tableby2word can't write in a subfolder directly
  short_path <- str_extract(path, "(?<=/)[^/]*$")
  write2word(tableby_obj, short_path, ...)
  file.rename(short_path, path)
}
```


```{r}
source("questions_sections.R")
renaming_questions_list <- flatten_list(questions_sections)
```



```{r}
included_articles_info <- read_csv("data/included_articles_info.csv", 
                                   col_types = cols(.default = "c"))
results_df <- read_tsv("data/to_use_for_stats/long_results_final.tsv",
                       col_types = cols(.default = "c"))
ttt_mapped <- read_tsv("data/to_use_for_stats/decision_atc_mapped.tsv",
                       col_types = cols(.default = "c", car_t_cells = "l")) %>% 
  distinct(answer, first, second, third, car_t_cells) %>% 
  rename(treatment_name = answer)
conditions_mapped <- read_tsv("data/to_use_for_stats/decision_icd_mapped.tsv",
                              col_types = cols(.default = "c"))
```


```{r Creating section data frames}
general_information_df <- results_df[results_df$section == "general_information", c("doi", "questions", "answer")]
individual_study_df <- results_df[results_df$section == "study_information",]
paic_results <- results_df[results_df$section %in% c("methodology", "results"), ]
```

# DM articles comparison level

```{r Wide methodo}
comparison_level_df <- paic_results %>% 
  pivot_wider(id_cols = c(doi, n_itc), names_from = questions, values_from = answer)
```


# DM Articles general Information

```{r}
articles_level_df <- general_information_df %>% 
  pivot_wider(id_cols = doi, names_from = questions, values_from = answer) %>% 
  # adding articles information
  left_join(included_articles_info, by = "doi") %>% 
  # adding conditions information
  left_join(conditions_mapped, by = "condition_name") 
stopifnot(!any(is.na(articles_level_df$`concept_name_ICD10 Chapter`)))
```

```{r DM authors affiliations}
articles_level_df <- articles_level_df %>% 
  # Manually correcting variation introduced during the review process 
  mutate(positions = if_else(
    positions == "Academic, Private Data Analysis Company, Pharmaceutical Industry",
    "Academic, Pharmaceutical Industry, Private Data Analysis Company",
    positions)) %>%
  mutate(positions_list = str_split(positions, ", "), 
         value_filling = c(TRUE)) %>% 
  unnest(positions_list) %>% 
  pivot_wider(names_from = positions_list, values_from = value_filling, values_fill = FALSE)
```

```{r Individual comparisons count}
articles_level_df <- articles_level_df[, "doi"] %>% 
  left_join(distinct(paic_results, doi, n_itc)) %>% 
  count(doi, name = "paic_count") %>% 
  right_join(articles_level_df)
  
```


```{r Various mutate steps: countries, year}
articles_level_df <- articles_level_df %>% 
  # Manually correcting variation introduced during the review process 
  mutate(across(c(country_first_author, country_last_author), 
         .fns = ~ ifelse(tolower(.x) %in% c("usa", "uk"),
                         str_to_upper(.x),
                         str_to_title(.x))), 
         `publication year` = as.numeric(`publication year`), 
         funded_pharma = grepl(x = funding_source, pattern = "Pharmaceutical", perl = TRUE),
         pharma_authorship_funding = funded_pharma | `Pharmaceutical Industry`
  ) %>% 
  rename(journal_title = `journal/book`)
```

```{r, paic conducted per article}
articles_level_df <- comparison_level_df %>% 
  group_by(doi) %>% 
  summarise(at_least_one_maic = any(paic_type == "MAIC"), 
            at_least_one_stc = any(paic_type == "STC"),
            at_least_one_mlnmr = any(paic_type == "Multilevel network meta-regression"), 
            at_least_other_paic = !any(
              at_least_one_maic,
              at_least_one_stc, 
              at_least_one_mlnmr) 
            ) %>% 
  mutate( # to create a column to display in a table
    maic_char = ifelse(at_least_one_maic, "MAIC", NA), 
    stc_char = ifelse(at_least_one_stc, "STC", NA), 
    mlnmr_char = ifelse(at_least_one_mlnmr, "ML-NMR", NA), 
    other_char = ifelse(at_least_other_paic, "Other", NA)
  ) %>% 
  unite(col = paic_conducted, maic_char , stc_char, mlnmr_char, other_char,
        sep = " & ", 
        na.rm = TRUE) %>% 
  set_labels(c(
    "paic_conducted" = "PAIC conducted"
  )) %>% 
  select(doi, paic_conducted) %>% 
  right_join(articles_level_df)
```  



## Statistics article level

```{r}
formula_article_level <- formulize(y = "", x = ".")
```

```{r}
# grouping last levels for display in tableby : eg for displaying only top countries 
# Meaningful if factor is ordered by frequency
grouping_last_levels <- function(x, n_first_levels, grouping_label = "Other") {
  last_levels <- levels(x)[n_first_levels + 1:length(levels(x))]
  new_names_last_levels <- rep(grouping_label, length(last_levels))
  new_levels <- c(levels(x)[1:n_first_levels], new_names_last_levels)
  levels(x) <- new_levels
  return(x)
}
```


```{r}
description_articles <- articles_level_df %>% 
  select(`publication year`, country_first_author, country_last_author, methodologist_yn, 
         `Pharmaceutical Industry`, Academic, `Private Data Analysis Company`, 
         journal_title, `concept_name_ICD10 Chapter`, pharma_authorship_funding, 
         paic_count, paic_conducted) %>% 
  set_labels(value = c(swap_names_values(renaming_questions_list), 
                       "paic_count" = "Count PAIC", 
                       "paic_conducted" = "PAIC conducted"
                       )
  ) %>% 
  mutate(`publication year` = as.factor(ifelse(`publication year` < 2020,
                                               "January 1st 2010 - December 31st 2019",
                                               "January 1st 2020 - April 2nd 2022")),
         across(where(is.logical), 
                .fns = ~ factor(ifelse(.x, "Yes", "No"), levels = c("Yes", "No"))),
         across(c(country_first_author, country_last_author), 
                .fns = ~ fct_infreq(.x) %>% grouping_last_levels(n_first_levels = 3)), 
         methodologist_yn = fct_infreq(methodologist_yn),
         journal_title = grouping_last_levels(fct_infreq(journal_title), 6), 
         `concept_name_ICD10 Chapter` = grouping_last_levels(fct_infreq(`concept_name_ICD10 Chapter`), 6)
  ) %>% 
  tableby(formula_article_level, 
          data = ., 
          numeric.stats = c("sum", "mean", "median", "q1q3", "max"), 
          )
```

```{r}
summary(description_articles)
```

```{r}
# See there https://github.com/hms-dbmi/Access-to-Data-using-PIC-SURE-API/blob/master/NHLBI_BioData_Catalyst/R/ORCHID_COVID19.ipynb
# Doesn't work very well
# table_description_articles <- as_tibble(description_articles)
# table_description_articles[, c('Total', 'Overall')] <- table_description_articles %>% 
#   select(Total, Overall) %>% 
#   apply(c(1, 2), 
#         function(elem) {
#           elem_bis <- unlist(elem)
#           ifelse(elem != '', 
#                  unlist(elem_bis) %>%
#                    round(1) %>%
#                    paste0(collapse = ' (') %>%
#                    paste0(')'),
#                  elem_bis
#           )
#         }
#   )

# But as.dataframe(summary(table_df))) is much more promising
# table_description_articles %>% 
#   flextable() %>% 
#   flextable::save_as_docx(path = "output_tables/articles_information_table.docx")
```

```{r, include=FALSE, results = "hide", }
# Needs to be run from the console, or remove inline output chunk options
tableby2word(description_articles,
             "output_tables/articles_information_table.docx",
             title = "Articles description",
             quiet = TRUE)
```



## Plots

### Journals

```{r Publication journals, fig.height=18}
#TODO: rajouter IF
## Authors specific affiliations would need to be parsed and retrieved through pubv1_info.txt --> regex looking at ". " preceded by a ", " or "^"
articles_level_df %>%
  mutate("journal_title" = jt,
         "journal_title_short" = ta) %>%
  group_by(journal_title_short) %>%
  summarise(count = n()) %>%
  arrange(desc(count)) %>%
  ggplot(aes(x = reorder(journal_title_short, count), y = count, label = count)) +
  geom_bar(stat = "identity") +
  geom_label() + 
  theme(axis.text.y = element_text(size = 12)) +
  scale_x_discrete() +
  coord_flip() +
  labs(title = "Publication journals",
       x = "Journals",
       y = "Articles count")
```
### Publication date

```{r Publication date}
## Publication dates
publication_date_df <- articles_level_df %>%
  select(pmid, edat) %>%
  mutate(publication_date = as_date(edat, format = "%Y/%m/%d %H:%M"),
         publication_year = year(publication_date),
         publication_date_q = lubridate::quarter(publication_date, with_year = TRUE),
         publication_date_s = lubridate::semester(publication_date, with_year = TRUE),
         publication_date_s = ifelse(round(publication_date_s %% 0.2, 1) == 0.1,
                                      trunc(publication_date_s),
                                      trunc(publication_date_s) + 0.5)) %>%
  left_join(included_articles_info[, c("pmid", "doi")], by ="pmid")


publication_date_df %>%
  filter(publication_year < 2022) %>%
  group_by(publication_year) %>%
  summarise(count = n()) %>%
  ggplot(aes(x = publication_year, y = count)) +
  geom_point() +
  geom_line() +
  geom_text(aes(label = count), nudge_y = 2.5, nudge_x = -0.05) +
  scale_x_continuous(breaks = 2010:2022) +
  labs(title = "MAIC/STC implementation: publications by years",
       x = "Year",
       y = "Publication counts")
```

```{r Intervals between articles received and accepted}
publication_dates_df <- articles_level_df %>% mutate(
  received_date = str_extract(phst, "[^\\].]+(?=\\[received\\])") %>% str_trim() %>% as_datetime(format = "%Y/%m/%d %H:%M"),
  accepted_date = str_extract(phst, "[^\\].]+(?=\\[accepted\\])") %>% str_trim() %>% as_datetime(format = "%Y/%m/%d %H:%M"),
  pubmed_date = str_extract(phst, "[^\\].]+(?=\\[pubmed\\])") %>% str_trim() %>% as_datetime(format = "%Y/%m/%d %H:%M"), 
  time_acceptation = accepted_date - received_date, 
  time_publication_pubmed = pubmed_date - received_date
) %>% 
  select(phst, received_date, accepted_date, time_acceptation, time_publication_pubmed, pubmed_date, pmid, pt, ta, pl, jt)

publication_dates_df %>% 
  pivot_longer(cols = c(time_acceptation, time_publication_pubmed), names_to = "time_type", values_to = "time") %>% 
  mutate(time = time/30.5) %>% 
  ggplot(aes(x = time)) + 
  facet_wrap(~ time_type) +
  # warning here
  geom_histogram() + 
  labs(x = "Time in months", "publication count", 
       title = "Time between submission and acceptation")
```
### Author's position

```{r }
articles_level_df %>% 
  count(positions) %>% {
    ggplot(., aes(x = positions, y = n)) +
      geom_bar(stat = "identity") +
      geom_label(aes(label = n), 
                 position = position_stack(vjust = 0.5)) + 
      coord_flip() + 
      scale_x_discrete(limits = rev(.$positions)) +
      labs(x = NULL, y = "Articles count", title = "Authors' positions") +
      theme(axis.text.y = element_text(size = 8))
  }
```


```{r}
articles_level_df %>% 
  pivot_longer(cols = c(Academic, `Pharmaceutical Industry`, `Private Data Analysis Company`), 
               names_to = "position") %>% 
  filter(value) %>% 
  count(position) %>% 
  ggplot(aes(x = position, y = n)) +
  geom_bar(stat = "identity") +
  geom_label(aes(y = 150, label = n),
             position = position_stack(vjust = 0.5),
             color = "black",
             show.legend = FALSE) + 
  labs(title = "Authors' positions",
       subtitle = "At least one author affiliated with: ", 
       y = "Articles count", 
       x = "Positions")
```


```{r }
articles_level_df %>% 
  mutate(collaboration = Academic & `Pharmaceutical Industry`) %>% 
  count(collaboration) %>% 
  ggplot(aes(x = collaboration, y = n)) + 
  geom_bar(stat = "identity") + 
  geom_label(aes(label = n, y = 30)) +
  scale_x_discrete(labels = c(`FALSE` = "No collaboration", `TRUE` = "Collaboration")) +
  labs(x = NULL, 
       y = "Articles count", 
       title = "Academics/Pharmaceutical Collaborations")
```

#### First and last authors country

```{r}
articles_level_df %>% 
  pivot_longer(cols = c(country_first_author, country_last_author), 
               names_to = "author", 
               values_to = "country") %>% 
  count(author, country) %>%
  ggplot(aes(x = reorder(country, n), y = n)) + 
  geom_bar(stat = "identity") + 
  facet_grid(" ~ author") + 
  coord_flip() + 
  labs(title = "Countries", 
       x = NULL, 
       y = "Article count")
```

### Methodology departments


```{r}
articles_level_df %>% 
  count(methodologist_yn) %>% 
  ggplot(aes(x = methodologist_yn, y = n, label = n)) +
  geom_bar(stat = "identity") +
  geom_label() +
  labs(x = "Affiliation with a methodology department/data-analysis company", 
       title = "Involvement of a Methodology department/data-analysis company", 
       y = "Count")
```

### Ties with pharmaceutical industry 



```{r}
ties_w_pharma_df <- articles_level_df %>% 
  select(positions, funding_source) %>% 
  mutate(ties_pharma = ifelse(grepl("Pharmaceutical", positions) | grepl("Pharmaceutical Industry", funding_source), TRUE, FALSE))

```

```{r}
articles_level_df %>% 
  count(pharmaceutical_ties_yn) %>% 
  ggplot(aes(x = pharmaceutical_ties_yn, y = n, label = n)) +
  geom_bar(stat = "identity") +
  geom_label() +
  coord_flip() + 
  labs(x = NULL,
       title = "Ties with pharma in COI section", 
       y = "Count")
```


### Fundings

```{r}
articles_level_df %>% 
  count(funding_source) %>% 
  ggplot(aes(x = funding_source, y = n, label = n)) +
  geom_bar(stat = "identity") +
  geom_label() +
  coord_flip() + 
  labs(x = NULL,
       title = "Mentioned of source of fundings", 
       y = "Count")
```
### Conditions

```{r fig.width=12, fig.height=10}
articles_level_df %>% 
  count(`concept_name_ICD10 Hierarchy`, `concept_code_ICD10 Hierarchy`) %>% 
  mutate(across(where(is.character), as.factor)) %>% 
  ggplot(aes(x = reorder(`concept_name_ICD10 Hierarchy`, as.numeric(`concept_code_ICD10 Hierarchy`)),
             y = n, 
             label = n)
  ) + 
  geom_bar(stat = "identity") +
  geom_label() + 
  coord_flip() +
  scale_y_discrete() + 
  labs(x = NULL, 
       y = "Articles count", 
       title = "Investigated Condition", 
       subtitle = "By ICD-10 Subchapter")

```


```{r fig.width=12}
articles_level_df %>% 
  count(`concept_name_ICD10 Chapter`, `concept_code_ICD10 Chapter`) %>% 
  mutate(across(where(is.character), as.factor)) %>% 
  ggplot(aes(x = reorder(`concept_name_ICD10 Chapter`, as.numeric(`concept_code_ICD10 Chapter`)),
             y = n, 
             label = n)
  ) + 
  geom_bar(stat = "identity") +
  geom_label() + 
  coord_flip() + 
  labs(x = NULL, 
       y = "Articles count", 
       title = "Investigated condition", 
       subtitle = "By ICD-10 Chapter")

```

# Individual studies level 

```{r, results='asis'}
individual_studies_questions <- c(
  "ipd_yn", 
  "ct_yn", 
  "country_study",
  "ct_phase", 
  "ct_arms"
)

description_individual_studies <- individual_study_df %>% 
  mutate(answer = str_to_title(answer)) %>% 
  #TODO: fix this "Xx'
  filter(answer != "Xx") %>%
  pivot_wider(names_from = questions, values_from = answer) %>% 
  mutate(ct_arms = ifelse(ct_arms == "??", NA, ct_arms)) %>% 
  select(all_of(individual_studies_questions)) %>% 
  tableby( ~ ., data = .) 
```

```{r}
summary(description_individual_studies)
```

```{r}
tableby2word(description_individual_studies, "output_tables/description_individual_studies.docx")
```

# Comparison level

## DM comparisons df

```{r data management to determine IPD/nonIPD treatments}
ttt_df <- paic_results %>% 
  select(doi, section, n_itc, questions, answer) %>% 
  filter(str_detect(questions,
                    pattern = c("(treatment_name)|(studies_number)"))) %>% 
  separate(questions, into = c("questions", "data_type"), 
           sep = "_(?=[^_]+$)"
  ) %>% 
  pivot_wider(names_from = questions, 
              values_from = answer) %>% 
  mutate(studies_number = str_split(studies_number, ";")) %>% 
  unnest_longer(studies_number) %>% 
  left_join(individual_study_df %>% 
              filter(questions == "ipd_yn") %>% 
              pivot_wider(names_from = questions, values_from = answer) %>% 
              mutate(ipd_yn = stringr::str_to_title(ipd_yn)) %>% 
              select(doi, study_number, ipd_yn), 
            by = c("doi" = "doi", "studies_number" = "study_number")
  )

stopifnot(
  "Some combinations of doi-n_itc-treatment are assigned both IPD and non IPD" =
    nrow(distinct(ttt_df, doi, n_itc, ipd_yn, treatment_name)) ==
    nrow(distinct(ttt_df, doi, n_itc, ipd_yn))
)

```

```{r Finding out similar comparisons, include=FALSE}

ipd_non_ipd_df <- ttt_df %>%
  distinct(doi, treatment_name, n_itc, ipd_yn) %>% 
  left_join(distinct(
    ttt_mapped[, c("treatment_name", "first", "second", "third", "car_t_cells")])
  ) %>% 
  pivot_wider(id_cols = c(doi, n_itc), names_from = c("ipd_yn"), values_from = "first") %>% 
  left_join(articles_level_df[, c("doi", "concept_name_ICD10 Hierarchy")], by = "doi") %>% 
  distinct(doi, Yes, No, `concept_name_ICD10 Hierarchy`) %>% 
  rename(condition = `concept_name_ICD10 Hierarchy`)

inverted_ipd <- ipd_non_ipd_df %>% 
  mutate(Yes_temp = No, No = Yes, Yes = Yes_temp) %>% 
  select(doi_inv = doi, Yes, No, condition)

same_comparisons <- inverted_ipd %>%
  inner_join(ipd_non_ipd_df,
             by = c("Yes", "No", "condition")) %>% 
  select(doi, doi_inv, everything()) %>% 
  filter(doi != doi_inv) %>% 
  rowwise() %>% 
  mutate(doi_pair = list(sort(c(doi, doi_inv)))) %>%
  ungroup() %>% 
  distinct(doi_pair, Yes, No, condition) %>% 
  unnest_wider(doi_pair, names_sep = "_")

```

```{r DM Sample sizes}
wide_sample_size_df <- comparison_level_df %>% 
  select(doi, n_itc, anchored_yn, paic_type, matches("^ss_", )) %>%
  mutate(across(matches("^ss_", ), as.integer)) %>% 
  mutate(
    ss_total_ipd = case_when(
      !is.na(ss_total_ipd) ~ ss_total_ipd,
      anchored_yn == "No" ~ ss_ttt_ipd, 
      anchored_yn == "Yes" ~ ss_ttt_ipd + ss_anchor_ipd, 
      TRUE ~ NA_integer_),
    ss_total_nonipd = case_when(
      !is.na(ss_total_nonipd) ~ ss_total_nonipd,
      anchored_yn == "No" ~ ss_ttt_nonipd, 
      anchored_yn == "Yes" ~ ss_ttt_nonipd + ss_anchor_nonipd, 
      TRUE ~ NA_integer_),
    ss_adjusted_total_ipd = case_when(
      !is.na(ss_adjusted_total_ipd) ~ ss_adjusted_total_ipd,
      anchored_yn == "No" ~ ss_adjusted_ttt_ipd,
      anchored_yn == "Yes" ~ ss_adjusted_ttt_ipd + ss_adjusted_anchor_ipd,
      TRUE ~ NA_integer_)
  ) %>% 
  mutate(difference_adjusted_ttt = ss_ttt_ipd - ss_adjusted_ttt_ipd,
         difference_adjusted_anchor = ss_anchor_ipd - ss_adjusted_anchor_ipd, 
         difference_adjusted_total = ss_total_ipd - ss_adjusted_total_ipd, 
         rapport_adjusted_ttt = ss_adjusted_ttt_ipd / ss_ttt_ipd,
         rapport_adjusted_anchor = ss_adjusted_anchor_ipd / ss_anchor_ipd,
         rapport_adjusted_total = ss_adjusted_total_ipd / ss_total_ipd, 
         # anchored_yn = ifelse(anchored_yn == "Yes", "Anchored", "Unanchored"),
         ss_ipd_yn = ifelse(is.na(ss_total_ipd) & is.na(ss_ttt_ipd), "No", "Yes"), 
         ss_nonipd_yn = ifelse(is.na(ss_total_nonipd) & is.na(ss_ttt_nonipd), "No", "Yes"), 
         ss_adjusted_yn = ifelse(is.na(ss_adjusted_ttt_ipd) & is.na(ss_adjusted_total_ipd), "No", "Yes"),
         reduction_ess_percent = ifelse(paic_type == "MAIC", (1 - rapport_adjusted_total) * 100, NA)) %>% 
  select(-anchored_yn, -paic_type)

long_sample_size_df <- wide_sample_size_df %>% 
  select(-doi, -n_itc, -ss_ipd_yn, -ss_nonipd_yn, -ss_adjusted_yn) %>% 
  pivot_longer(cols = everything()) %>% 
  mutate(ipd_yn = case_when(
    grepl("total", name) ~ "Total",
    grepl("_ipd_", name) | grepl("ess_", name) ~ "IPD", 
    grepl("_nonipd_", name) ~ "Non IPD",
    TRUE ~ NA_character_
  ),
  sample_size_type = case_when(
    grepl("difference", name) ~ "Difference",
    grepl("rapport", name) ~ "Rapport", 
    grepl("adjusted", name) ~ "Adjusted (ESS)",
    TRUE ~ "Original")
  )

```


```{r DM correct specification}
stopifnot(all(unique(comparison_level_df$anchored_yn) %in% c("Yes", "No")))
stopifnot(all(unique(comparison_level_df$paic_type) %in% c("MAIC", "STC", "Multilevel network meta-regression")))
stopifnot(all(unique(comparison_level_df$tem_yn) %in% c("Yes", "No discussion (in the main text) of the status of treatment-effect modifiers of the variables")))
model_specification_df <- comparison_level_df %>% 
  select(doi, n_itc, paic_type, anchored_yn, tem_yn, pf_yn) %>% 
  mutate(correct_adjustment =
           if_else(anchored_yn == "No", 
                   case_when( # Unanchored
                     tem_yn == "Yes" & pf_yn == "Yes" ~ "Yes", 
                     tem_yn == "Yes" & pf_yn == "No" ~ "No inclusion of PF",
                     str_starts(tem_yn, "No discussion") & str_starts(tem_yn, "No discussion") ~ "No discussion of the status of PF or TEM", 
                     TRUE ~ NA_character_
                   ), if_else( # Anchored
                     paic_type == "MAIC", 
                     case_when(
                       pf_yn == "Yes" ~ "Inclusion of prognostic factors",
                       str_starts(pf_yn, "No discussion") & tem_yn == "Yes" ~ "Inclusion of PF or instrumental variables",
                       pf_yn == "No" & tem_yn == "Yes" ~ "Yes", 
                       str_starts(tem_yn, "No discussion") & str_starts(tem_yn, "No discussion") ~ "No discussion of the status of PF or TEM", 
                       TRUE ~ NA_character_),
                     case_when( # STC or MLNMR
                       tem_yn == "Yes" ~ "Yes",
                       tem_yn == "No discussion (in the main text) of the status of treatment-effect modifiers of the variables" ~ "No discussion of the status of PF or TEM", 
                       TRUE ~ NA_character_
                     )
                   )
           )
  ) %>% 
  select(doi, n_itc, correct_adjustment) %>% 
  mutate(correct_adjustment = as.factor(correct_adjustment) %>% relevel("Yes"))
stopifnot(all(!is.na(model_specification_df$correct_adjustment)))
```



```{r DM Variables selection, results='asis'}
variables_selection_df <- comparison_level_df %>% 
  select(doi, n_itc, variables_selection_justification) %>% 
  # because the complete item for this one is "Nothing mentioned, not reported", thus simplyfying it
  mutate(variables_selection_justification = variables_selection_justification %>% 
           tolower() %>% 
           str_split(",") %>% 
           map(~ str_trim(.x)) %>% 
           map(~ .x[.x != "not reported"])) %>%
  mutate(no_justification = sapply(variables_selection_justification,
                                   function(x) any(x == "nothing mentioned")),
         expertise = sapply(variables_selection_justification,
                            function(x) any(str_starts(x, "a priori expert-knowledge"))), 
         literature = sapply(variables_selection_justification,
                             function(x) any(str_starts(x, "literature based"))),
         statistics_ipd = sapply(variables_selection_justification,
                                 function(x) any(grepl("assessed in the ipd dataset", x, fixed = TRUE))), 
         imbalance = sapply(variables_selection_justification,
                            function(x) any(grepl("statistical imbalanced between", x, fixed = TRUE))),
         justification_char = case_when(
           expertise | literature ~ "Expert opinion and/or literature based", 
           imbalance | statistics_ipd ~ "Incorrect (statistics-based only)", 
           TRUE ~ "No justification"
         )
  ) %>% 
  select(-variables_selection_justification)

```


```{r DM variables adjustment}

replacement_list_covariates <- c(
  coll("Disease severity/disease history (ie past conditions or symptoms directly related to the disease of interest, eg history of venous thromboembolism in sickle cell disease)") = "Disease history",
  "Performance score (ECOG PS, Karnofsky, Lansky, OMS, Ranson, ...)" = "Performance Score"
)

covariates_adjustment_df <- comparison_level_df_dm %>% 
  select(doi, n_itc, covariates_names, adjustment_geographical) %>% 
  mutate(
    covariates_names = str_replace_all(covariates_names,
                                       pattern = coll("Disease severity/disease history (ie past conditions or symptoms directly related to the disease of interest, eg history of venous thromboembolism in sickle cell disease)"), 
                                       replacement = "Disease history"), 
    covariates_names = str_replace_all(covariates_names, 
                                      pattern = coll("Performance score (ECOG PS, Karnofsky, Lansky, OMS, Ranson, ...)"), 
                                      replacement = "Performance score"
    ),
    covariates_list = covariates_names %>% 
      tolower() %>% 
      str_split(",") %>% 
      map(~ str_trim(.x)) , 
    adjustment_geographical = if_else(is.na(adjustment_geographical),
                                      FALSE, 
                                      if_else(adjustment_geographical == "Yes", TRUE, FALSE)
    )
  ) %>% 
  unnest_longer(covariates_list) %>% 
  mutate(filler = TRUE) %>% 
  pivot_wider(names_from = covariates_list, values_from = filler, values_fill = FALSE) %>% 
  rename(none = `NA`, 
         comorbidities = `comorbidities and medical history (beside pathology/disease of interest in the comparison)`, 
         others = `other(s)`, 
         past_treatments = `past treatments for the disease of interest`, 
         race_ethnicity = `race/ethnicity`, 
         history = `disease history`, 
         performance_score = `performance score`) %>% 
  mutate(comorbidities = if_else(others & !adjustment_geographical, TRUE, comorbidities)) %>% 
  select(-covariates_names, -adjustment_geographical)
```


```{r DM comparison level df}
comparison_level_df_dm <- comparison_level_df %>% 
  left_join(ttt_mapped[, c("treatment_name", "first")],
            by = c("treatment_name_ipd" = "treatment_name")) %>% 
  rename(act_ipd = first) %>% 
  left_join(ttt_mapped[, c("treatment_name", "first")],
            by = c("treatment_name_nonipd" = "treatment_name")) %>% 
  rename(act_nonipd = first) %>% 
  mutate(across(c(act_ipd, act_nonipd), 
                .fns = ~ grouping_last_levels(fct_infreq(.x), 5)), 
         paic_type = fct_infreq(paic_type), 
         anchored_yn = factor(anchored_yn, levels = c("Yes", "No"))
         ) %>% 
  # Dropping variables referring to sample sizes
  select(doi, n_itc, !any_of(names(wide_sample_size_df))) %>% 
  # Adding sample size DM
  left_join(wide_sample_size_df) %>% 
  left_join(model_specification_df) %>% 
  left_join(variables_selection_df) %>% 
  left_join(covariates_adjustment_df) %>% 
  set_labels(swap_names_values(renaming_questions_list))
```

## Description comparisons


```{r, results='asis'}
description_comparisons <- comparison_level_df_dm %>%
  select(paic_type, anchored_yn, act_ipd, act_nonipd, outcome_variable_type) %>% 
  tableby(~ ., data = ., control = ) 
```

```{r}
tableby2word(description_comparisons, "output_tables/description_comparison.docx")
```

## Correct model adjustment

```{r}
correct_adjustment <- comparison_level_df_dm %>% 
  select(paic_type, anchored_yn, correct_adjustment) %>% 
  tableby(paic_type ~ correct_adjustment, data = ., strata = anchored_yn, 
          control = tableby.control(cat.droplevels = TRUE))
```

```{r}
summary(correct_adjustment)
```

```{r}
tableby2word(correct_adjustment, "output_tables/correct_adjustment.docx")
```


## Correct variables justification 

```{r}
variables_justification <- comparison_level_df_dm %>% 
  select(no_justification, expertise, literature, statistics_ipd, imbalance, justification_char, anchored_yn) %>% 
  tableby( anchored_yn ~ ., data = .)
```

```{r}
summary(variables_justification)
```

```{r}
tableby2word(variables_justification, "output_tables/variables_justification.docx")
```


## Main methodological aspects

```{r}
main_methods <- comparison_level_df_dm %>%
  left_join(articles_level_df[, c("doi", "systematic_review_yn")]) %>% 
  select(systematic_review_yn, primary_outcome_yn, ss_ipd_yn, ss_nonipd_yn, ss_adjusted_yn, reduction_ess_percent) %>% 
  tableby( ~ ., data = .) 
```

```{r}
summary(main_methods)
```


```{r}
tableby2word(main_methods, "output_tables/main_methods.docx")
```

## Secondary methodological aspects

```{r}
comparison_level_df_dm %>% 
  select(outcome_variable_type, contrast_effect_type, 
         covariates_n, #TODO: reprendre d'ici , rajouter les noms des covariables sur lesquels c'est ajusté
         , scale_choice_yn, 
         adjustment_model_details_yn)
```


## Figures 

### Treatment 

```{r, fig.height = 18}
ttt_df %>% 
  mutate(ipd_yn = tolower(ipd_yn) %>% factor(levels = c("yes", "no"))) %>% 
  #TODO: fix the NA issue
  filter(!is.na(ipd_yn)) %>% 
  distinct(doi, n_itc, treatment_name, ipd_yn) %>% 
  left_join(distinct(ttt_mapped[, c("answer", "first", "second", "third", "car_t_cells")]),
            by = c("treatment_name" = "answer")) %>%
  group_by(ipd_yn) %>% 
  count(first) %>% 
  ggplot(aes(x = reorder(first, n), y = n, label = n)) +
  geom_bar(stat = "identity") +
  geom_label() +
  coord_flip() +
  facet_wrap(c("ipd_yn"), labeller = labeller("ipd_yn" = c("no" = "Non IPD", "yes" = "IPD"))) +
  labs(title = "Treatments compared", 
       subtitle = "ATC classification level 2") +
  theme(axis.text = element_text(size = 16), 
        strip.text = element_text(size = 18), 
        plot.title = element_text(size = 22), 
        plot.subtitle = element_text(size = 20))
```


```{r Sample size reduction, fig.width = 14}

sample_size_labels <- c(
  Rapport = "Rapport ESS/Original",
  Difference = "Difference Original - ESS", 
  Original = "Original Sample Size", 
  ESS = "ESS"
)

long_sample_size_df %>% 
  filter(paic_type %in% c("MAIC"), 
         ipd_yn == "Total") %>%
  mutate(sample_size_type = factor(sample_size_type, levels = c("Original", "ESS", "Difference", "Rapport"))) %>% 
  # filter(ipd_yn == "Total") %>% 
  ggplot(aes(x = 1, y = value)) +
  geom_violin() + 
  geom_jitter(width = 0.2) + 
  facet_wrap(~ sample_size_type,
             scales = "free",
             ncol = 4, 
             labeller = labeller( sample_size_type = sample_size_labels)) +
  theme(legend.position = "bottom", legend.direction = "horizontal", axis.ticks =  element_blank()) +
  labs(title = "Sample Size Reduction in MAIC", 
       y = "Sample Size", 
       x = NULL)

```



### Outcomes 


```{r, results='asis'}

funded_pharma <- general_information_df %>% select(doi, )
wide_methodo_results  %>% 
  mutate(across(.cols = c(outcome_short_name, primary_outcome_name), 
                .fns = stringr::str_to_title)
  ) %>% 
  add_count(primary_outcome_name, name = "primary_outcome_name_n") %>% 
  mutate(primary_outcome_name = forcats::fct_reorder(primary_outcome_name,
                                                     primary_outcome_name_n, 
                                                     .desc = TRUE)) %>% 
 # TODO : fix missing outcome name 
  tableby( primary_outcome_yn ~  primary_outcome_type + outcome_short_name,
           data = .) %>% 
  summary()
```

### Treatment effect estimates

```{r}
# renaming_contrast <- c(
#   "Incidence Rate Ratio" = "Rates: OR/RR/means ratio", 
#   "Rate ratio" = "Rates: OR/RR/means ratio", 
#   "OR" = "Rates: OR/RR/means ratio", 
#   "RR" = "Rates: OR/RR/means ratio", 
#   "Means Ratio" = "Rates: OR/RR/means ratio", 
#   "Means difference" = "Means/medians difference", 
#   "Median difference" = "Means/medians difference", 
#   "RMST difference at 12 months" = "Means/medians difference",
#   "Risk difference" = "Risk/Rate difference", 
#   "Rate difference" = "Risk/Rate difference", 
#   "HR" = "Hazard Ratio", 
#   "Proportion difference" = "Proportion difference",
#   "Proportions difference" = "Proportion difference"
# )

renaming_contrast <- c(
  "Incidence Rate Ratio" = "Rates/ratio", 
  "Rate ratio" = "Rates/ratio", 
  "OR" = "Rates/ratio", 
  "RR" = "Rates/ratio", 
  "Means Ratio" = "Rates/ratio", 
  "Means difference" = "Difference", 
  "Median difference" = "Difference", 
  "RMST difference at 12 months" = "Difference",
  "Risk difference" = "Difference", 
  "Rate difference" = "Difference", 
  "HR" = "Rates/ratio", 
  "Proportion difference" = "Proportion difference",
  "Proportions difference" = "Proportion difference"
)

wide_results_outcome <- wide_methodo_results %>% 
   mutate(contrast = replace_in_vec(contrast, renaming_contrast)) %>% 
  select(doi, n_itc, contrast, effect_direction, unadjusted_lb_ci, unadjusted_ub_ci,
         adjusted_lb_ci, adjusted_ub_ci, unadjusted_significant, adjusted_significant, 
         effect_cutoff, unadjusted_num_pval, adjusted_num_pval, unadjusted_effect, 
         adjusted_effect, direction_benefit, outcome_short_name) %>% 
  pivot_longer(names_pattern = "((?:un)?adjusted)(_)(.*)", 
               cols = !c(doi, n_itc, contrast, effect_direction, direction_benefit, outcome_short_name, effect_cutoff), 
               names_to = c("adjustment", NA, "indicator"), 
               values_to = "values") %>%
  pivot_wider(id_cols = c(doi, n_itc, contrast, effect_direction, adjustment, direction_benefit, outcome_short_name, effect_cutoff), 
              names_from = indicator, 
              values_from = values) %>% 
  mutate(across(c(lb_ci, ub_ci, num_pval, effect, effect_cutoff), as.numeric)) 


# Standarsize what is beneficial for IPD
# stopifnot(all(!is.na(wide_results_outcome$direction_benefit)))
# stopifnot(all(!is.na(wide_results_outcome$effect)))
# table(is.na(wide_results_outcome$effect), useNA = "always")
# table(is.na(wide_results_outcome$effect_cutoff), useNA = "always")
# wide_results_outcome %>% filter(!is.na(effect) & is.na(effect_cutoff)) %>% View()

left_side_outcome <- wide_results_outcome %>% 
  filter(effect_direction == "Numerator if ratio, or left side if difference")

right_side_outcome <- wide_results_outcome %>% 
  filter(effect_direction == "Denominator if ratio, or rightside if difference") %>% 
  mutate(across(c(lb_ci, ub_ci, effect),
                .fns = function(x) {
                  ifelse(effect_cutoff == 0, -x, ifelse(effect_cutoff == 1, 1/x, NA))
                })
  ) %>% 
  mutate(lb_ci_temp = ub_ci, 
         ub_ci = lb_ci, 
         lb_ci = lb_ci_temp, 
         lb_ci_temp = NULL)

wide_results_outcome <- bind_rows(left_side_outcome, right_side_outcome) %>%
  select(-effect_direction) %>%
# Creating binary variable distinguishing estimates beneficial for IPD:
  mutate(benefit_ipd = case_when(
    direction_benefit == "inferior" & effect <= effect_cutoff ~ TRUE,
    direction_benefit == "superior" & effect >= effect_cutoff ~ TRUE,
    !is.na(effect) ~ FALSE,
    TRUE ~ NA)
  )
```


```{r, eval = FALSE}
wide_results_outcome %>%
  #TODO: see what is the best to do with contrast == NA
  filter(!is.na(contrast)) %>%
  ggplot(aes(x = adjustment, y = effect, color = significant)) +
  geom_jitter(width = 0.1) +
  geom_hline(aes(yintercept = effect_cutoff), linetype = "dashed", color = "black") +
  facet_wrap(~ contrast, scales = "free_y") +
  scale_y_continuous(trans = "log10") +
  labs(title = "Treatment contrast effects: point estimates",
       subtitle = "IPD is numerator for rates/ratio, left side differences",
       y = "Estimate",
       x = NULL
  )


```

```{r}
wide_results_outcome %>% 
  left_join(ties_w_pharma_df, by = "doi") %>% 
  filter(adjustment == "adjusted", significant == "TRUE", ties_pharma, !benefit_ipd) %>% 
  View()
```


## Results benefit IPD
```{r, results='asis'}
wide_results_outcome %>% 
  left_join(ties_w_pharma_df, by = "doi") %>% 
  tableby(benefit_ipd ~ significant, strata = adjustment, data = .) %>% 
  summary(title = "Treatment point estimate benefits IPD") 
```

```{r, fig.width=14, fig.height=12}
outcomes_df <- wide_results_outcome %>% 
  select(doi, n_itc, adjustment, contrast, direction_benefit, outcome_short_name, effect_cutoff, significant, benefit_ipd, effect) %>% 
  filter(!is.na(effect)) %>% 
  # Creating a variable where a beneficial effect for IPD is always inferior to threshold
  mutate(effect_benefit = case_when(
    direction_benefit == "superior" & effect_cutoff == 0 ~ -effect, 
    direction_benefit == "superior" & effect_cutoff == 1 ~ 1/effect,
    TRUE ~ effect,
  ), 
  significant_char = case_when(
    significant == "TRUE" ~ "Yes",
    significant == "FALSE" ~ "No", 
    is.na(significant) ~ "Unknown")) 

num_comparison_df <- outcomes_df %>% 
  distinct(n_itc, doi, contrast) %>% 
  group_by(contrast) %>% 
  mutate(num_comparison = 1:n()) %>% 
  ungroup()

outcomes_df <- outcomes_df %>% 
  left_join(num_comparison_df)
```


```{r, fig.width=14, fig.height=12}
labelling_data <- data.frame(
  contrast = unique(outcomes_df$contrast), 
  left_side = "Favors IPD", 
  right_side = "Favors non-IPD"
) %>%
  left_join(distinct(outcomes_df, contrast, effect_cutoff)) %>% 
  left_join(summarise(group_by(outcomes_df[, c("contrast", "effect", "num_comparison")], contrast),
                      left_x = min(effect), 
                      right_x = max(effect), 
                      max_num_comparison = max(num_comparison)))
```


```{r, fig.width=14, fig.height=16}
outcomes_df %>% 
  ggplot(aes(x = effect_benefit, y = num_comparison, color = significant_char, shape = adjustment)) + 
  geom_point(size = 3) +
  geom_vline(aes(xintercept = effect_cutoff), linetype = "dashed", color = "black") +
  # geom_blank(aes(y = max_num_comparison * 1.1, x = 3), inherit.aes = FALSE, data = labelling_data) +
  scale_color_manual(values = c("Yes" = "#cc0000", "No" = "#000000", "Unknown" = "#D9D9D9")) +
  facet_wrap(~ contrast, scales = "free") + 
  labs(title = "PAITC treatment effects point estimates", 
       subtitle = "Left side of vertical dashed line favors IPD", 
       color = "5% significance level", 
       shape = "Adjustment",
       x = "Treatment effect point estimate", 
       y = NULL) +
  theme(legend.position = "bottom",
        text = element_text(size = 14),
        axis.text.y = element_blank(),
        axis.text = element_text(size = 14), 
        axis.title = element_text(size = 16), 
        plot.title = element_text(size = 20), 
        plot.subtitle = element_text(size = 18, face = c("bold.italic")), 
        legend.text = element_text(size = 16),
        legend.box.just = "top",
        legend.box = "vertical") + 
  guides(shape = guide_legend(override.aes = list(color = "black")))
```



```{r }
outcomes_df %>% 
  filter(adjustment == "adjusted") %>% 
  ggplot(aes(x = adjustment,
             y = effect_benefit,
             # shape = adjustment
             )) + 
  # geom_violin() +
  geom_boxplot(fill = "white", outlier.shape = NA, width = 0.5) +
  geom_jitter(aes(color = significant_char), size = 1, width = 0.05, alpha = 0.7) +
 geom_hline(aes(yintercept = effect_cutoff), linetype = "dashed", color = "black") +
  # geom_blank(aes(y = max_num_comparison * 1.1, x = 3), inherit.aes = FALSE, data = labelling_data) +
  # scale_color_manual(values = c("Yes" = "#cc0000", "No" = "#000000", "Unknown" = "#D9D9D9")) +
  facet_wrap( ~ contrast, scales = "free", ncol = 1) + 
  coord_flip() + 
  labs(title = "PAITC treatment effects point estimates", 
       subtitle = "Left side of vertical dashed line favors IPD treatment", 
       color = "5% significance level", 
       shape = "Adjustment",
         y = "Relative treatment effect estimate", 
       x = NULL) +
  theme(legend.position = "right",
        # text = element_text(size = 14),
        axis.text.y = element_blank(),
        # axis.text = element_text(size = 14), 
        # axis.title = element_text(size = 16), 
        # plot.title = element_text(size = 20), 
        plot.subtitle = element_text(face = c("bold.italic")), 
        # legend.text = element_text(size = 16),
        legend.box.just = "top",
        legend.box = "horizontal") + 
  guides(shape = guide_legend(override.aes = list(color = "black")))
```

```{r}
plot_layout <- outcomes_df %>%   
  left_join(
    wide_sample_size_df %>% 
      mutate(n_ipd_total = ifelse(anchored_yn == "Yes", n_ipd_total/2, n_ipd_total)) %>% 
      select(doi, n_itc, n_ipd_total), 
    by = c("doi", "n_itc")
  ) %>% 
  filter(adjustment == "adjusted", 
         contrast == "Rates/ratio") %>% 
  mutate(contrast = factor(contrast, 
                           levels = c("Difference", "Rates/ratio"), 
                           labels = c("Mesure de l'effet : différence absolue", 
                                      "Mesure de l'effet : rates/ratio"))) %>% 
  ggplot(aes(x = effect_benefit, y = n_ipd_total, color = significant_char)) + 
  scale_x_continuous(trans = "log10",
                     breaks = c(0.01, 0.1, 1, 10, 100),
                     labels = c("0,01", "0,1", "1", "10", "100")) +
  scale_y_continuous(trans = "log10") +
  scale_color_manual(labels = c("Yes" = "Oui", "No" = "Non", "Unknown" = "Inconnu"),
                       limits = c("Yes", "No", "Unknown"), 
                       values = c("Yes" = "#E84646", "No" = "#65ADC2", "Unknown" = "#233B43")) +
  labs(title = "Estimation de l'effet de traitement, ajustée via PAIC (rapports et ratio)", 
       subtitle = "Côté gauche de la ligne verticale en pointillée montre un effet en faveur du traitement \navec données individuelles", 
       color = "Effet statistiquement \nsignificatif (alpha = 5%)", 
       y = "Taille échantillon bras traitement données ind.", 
       x = "\nTaille d'effet") +
  theme(legend.position = "bottom",
        axis.title = element_text(size = 10),
        legend.title = element_text(size = 10),
        plot.subtitle = element_text(size = 10, face = c("bold.italic")), 
        plot.title = element_text(size = 13),
        legend.box.just = "top",
        legend.box = "vertical") + 
  guides(shape = guide_legend(override.aes = list(color = "black"))) +
  geom_vline(aes(xintercept = effect_cutoff), linetype = "dashed", color = "black")

```


```{r}
plot_layout +
  geom_point() +
  coord_cartesian(xlim = c(0.01, 100), ylim = c(20, NA), clip = "off", expand = TRUE) +
  annotate("text", label = "\nFavorise données agrégées", x = 10, y = 9, size = 3) +
  geom_segment(aes(x = 1.2, xend = 90, y = 9, yend = 9),
               size = 0.7,
               arrow = arrow(length = unit(0.2,"cm")),
               inherit.aes = FALSE) +
  annotate("text", label = "\nFavorise données individuelles", x = 0.1, y = 9, size = 3) +
  geom_segment(aes(x = 0.82, xend = 0.011, y = 9, yend = 9),
               size = 0.7,
               arrow = arrow(length = unit(0.2,"cm")),
               inherit.aes = FALSE) +
    theme(legend.position = "bottom",
        axis.title = element_text(size = 10),
        legend.title = element_text(size = 10),
        plot.subtitle = element_blank(), 
        plot.title = element_text(size = 13),
        legend.box.just = "top",
        legend.box = "vertical")

ggsave("funnel_plot_ratio.jpg")
```



```{r}
plot_layout +
  geom_boxplot(aes(x = effect_benefit, y = significant_char), fill = "white", outlier.shape = NA, width = 0.2) +
  scale_y_discrete()
ggsave("test.png")

```


```{r}
outcomes_df %>% 
  filter(adjustment == "adjusted") %>% 
  mutate(contrast = factor(contrast, 
                           levels = c("Difference", "Rates/ratio"), 
                           labels = c("Mesure de l'effet : différence absolue", 
                                      "Mesure de l'effet : rates/ratio"))) %>% 
  ggplot(aes(x = adjustment,
             y = effect_benefit,
             # shape = adjustment
             )) + 
  geom_boxplot(fill = "white", outlier.shape = NA, width = 0.5) +
  geom_jitter(aes(color = significant_char), size = 1, width = 0.05, alpha = 0.7) +
  geom_hline(aes(yintercept = effect_cutoff), linetype = "dashed", color = "black") +
  # geom_blank(aes(y = max_num_comparison * 1.1, x = 3), inherit.aes = FALSE, data = labelling_data) +
  # scale_color_manual(values = c("Yes" = "#cc0000", "No" = "#000000", "Unknown" = "#D9D9D9")) +
  facet_wrap( ~ contrast, scales = "free", ncol = 1) + 
  coord_flip() + 
  scale_color_discrete(labels = c("Non", "Inconnu", "Oui")) + 
  labs(title = "Estimation de l'effet de traitement, ajustée via PAITC", 
       subtitle = "Côté gauche de la ligne verticale en pointillée montre un \neffet en faveur du traitement avec données individuelles", 
       color = "Effet statistiquement \nsignificatif (alpha = 5%)", 
       y = "Effet de traitement relatif", 
       x = NULL) +
  theme(legend.position = "right",
        axis.text.y = element_blank(),
        plot.subtitle = element_text(face = c("bold.italic")), 
        legend.box.just = "top",
        legend.box = "horizontal") + 
  guides(shape = guide_legend(override.aes = list(color = "black")))
ggsave(filename = "boxplot_effet_fr.png")
```



```{r, fig.width=14, fig.height=16}
outcomes_plot <- outcomes_df %>% 
  # select(num_comparison, contrast, effect_cutoff, adjustment, effect) %>% 
  # Keeping only data with both unadjusted and adjusted effect
  pivot_wider(id_cols = c(num_comparison, contrast),
              names_from = adjustment,
              values_from = effect) %>%
  filter(!is.na(adjusted) & ! is.na(unadjusted)) %>%
  pivot_longer(cols = c("adjusted", "unadjusted"), names_to = "adjustment", values_to = "effect") %>% 
  left_join(outcomes_df[, c("num_comparison", "contrast", "adjustment", "significant_char", "effect_cutoff")], 
            by = c("num_comparison", "contrast", "adjustment")) %>% 
  ggplot() + 
  geom_point(aes(y = num_comparison,
             color = significant_char, 
             x = effect,
             shape = adjustment,
             group = adjustment), size = 3) + 
  geom_line(aes(y = num_comparison,
             x = effect,
             group = num_comparison), size = 0.5, color = "darkgrey", linetype = 1) +
  geom_vline(aes(xintercept = effect_cutoff), linetype = "dashed", color = "black") +
  scale_color_manual(values = c("Yes" = "#cc0000", "No" = "#000000", "Unknown" = "#D9D9D9")) + 
  facet_wrap(~ contrast, scales = "free") + 
  # facet_zoom(xlim = c(-2, 2)) +
  labs(title = "PAITC: distance between adjusted and not-adjusted treatment effects point estimates", 
       subtitle = "Vertical dashed lines represent absence of treatment effect difference",
       color = "5% significance level", 
       shape = "Adjustment",
       x = "Treatment effect point estimate", 
       y = NULL) +
  theme(legend.position = "bottom",
        axis.text.y = element_blank(),
        text = element_text(size = 14),
        axis.text = element_text(size = 14), 
        axis.title = element_text(size = 16), 
        plot.title = element_text(size = 20), 
        plot.subtitle = element_text(size = 18, face = c("bold.italic")), 
        legend.text = element_text(size = 16),
        legend.box.just = "top",
        legend.box = "vertical") + 
  guides(shape = guide_legend(override.aes = list(color = "black")))
outcomes_plot
```


```{r}
library("ggforce")
library("patchwork")
plot1 <-  outcomes_df %>% 
  # select(num_comparison, contrast, effect_cutoff, adjustment, effect) %>% 
  # Keeping only data with both unadjusted and adjusted effect
  pivot_wider(id_cols = c(num_comparison, contrast),
              names_from = adjustment,
              values_from = effect) %>%
  filter(!is.na(adjusted) & ! is.na(unadjusted), 
         contrast == "Rates: OR/RR/means ratio") %>%
  pivot_longer(cols = c("adjusted", "unadjusted"), names_to = "adjustment", values_to = "effect") %>% 
  left_join(outcomes_df[, c("num_comparison", "contrast", "adjustment", "significant_char", "effect_cutoff")], 
            by = c("num_comparison", "contrast", "adjustment")) %>% 
  ggplot() + 
   geom_point(aes(y = num_comparison,
                  color = significant_char, 
                  x = effect,
                  shape = adjustment,
                  group = adjustment), size = 3) + 
   geom_line(aes(y = num_comparison,
                 x = effect,
                 group = num_comparison), size = 0.5, color = "darkgrey", linetype = 1) +
   geom_vline(aes(xintercept = effect_cutoff), linetype = "dashed", color = "black") +
   scale_color_manual(values = c("Yes" = "#cc0000", "No" = "#000000", "Unknown" = "#D9D9D9")) +
   facet_zoom(xlim = c(0, 6)) +
   # facet_wrap(~ contrast, scales = "free") + 
   labs(title = "", 
        subtitle = "Rates: OR/RR/means ratio",
        color = "5% significance level", 
        shape = "Adjustment",
        x = "Treatment effect point estimate", 
        y = NULL) +
   theme(legend.position = "bottom",
         axis.text.y = element_blank(),
         text = element_text(size = 14),
         axis.text = element_text(size = 14), 
         axis.title = element_text(size = 16), 
         plot.title = element_text(size = 20), 
         plot.subtitle = element_text(size = 18, face = c("bold.italic")), 
         legend.text = element_text(size = 16),
         legend.box.just = "top",
         legend.box = "vertical") + 
   guides(shape = guide_legend(override.aes = list(color = "black")))  +
  theme(strip.background = element_rect(fill = "grey"))

plot2 <- outcomes_df %>% 
  # select(num_comparison, contrast, effect_cutoff, adjustment, effect) %>% 
  # Keeping only data with both unadjusted and adjusted effect
  pivot_wider(id_cols = c(num_comparison, contrast),
              names_from = adjustment,
              values_from = effect) %>%
  filter(!is.na(adjusted) & ! is.na(unadjusted), 
         contrast == "Means/medians difference") %>%
  pivot_longer(cols = c("adjusted", "unadjusted"), names_to = "adjustment", values_to = "effect") %>% 
  left_join(outcomes_df[, c("num_comparison", "contrast", "adjustment", "significant_char", "effect_cutoff")], 
            by = c("num_comparison", "contrast", "adjustment")) %>% 
  ggplot() + 
   geom_point(aes(y = num_comparison,
                  color = significant_char, 
                  x = effect,
                  shape = adjustment,
                  group = adjustment), size = 3) + 
   geom_line(aes(y = num_comparison,
                 x = effect,
                 group = num_comparison), size = 0.5, color = "darkgrey", linetype = 1) +
   geom_vline(aes(xintercept = effect_cutoff), linetype = "dashed", color = "black") +
   scale_color_manual(values = c("Yes" = "#cc0000", "No" = "#000000", "Unknown" = "#D9D9D9")) +
   facet_zoom(xlim = c(-3, 3)) +
   # facet_wrap(~ contrast, scales = "free") + 
   labs(title = "", 
        subtitle = "Means/medians difference",
        color = "5% significance level", 
        shape = "Adjustment",
        x = "Treatment effect point estimate", 
        y = NULL) +
   theme(legend.position = "bottom",
         axis.text.y = element_blank(),
         text = element_text(size = 14),
         axis.text = element_text(size = 14), 
         axis.title = element_text(size = 16), 
         plot.title = element_text(size = 20), 
         plot.subtitle = element_text(size = 18, face = c("bold.italic")), 
         legend.text = element_text(size = 16),
         legend.box.just = "top",
         legend.box = "vertical") + 
   guides(shape = guide_legend(override.aes = list(color = "black"))) +
  theme(strip.background = element_rect(fill = "grey"))
```


```{r, fig.height=14, fig.width=12}
plot1 + plot2
```


