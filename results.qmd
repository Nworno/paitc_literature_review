---
title: "PAITC Systematic Review Results"
format: pdf
---

```{r config knitr, echo=FALSE}
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(error = FALSE)
knitr::opts_chunk$set(message = FALSE)

knitr::opts_chunk$set(fig.width = 12)
knitr::opts_chunk$set(fig.height = 8)
```


```{r}
library(readr)
library(stringr)
library(dplyr)
library(tidyr)
library(tibble)
library(purrr)
library(lubridate)
library(ggplot2)
library(ggthemr)
library(arsenal)
library(flextable)
library(forcats)
library(kableExtra)
library(glue)

source("R_snippets.R")
ggthemr::ggthemr("fresh")
```

```{r}
article_path <- "C:/Users/aserret-larmande/Documents/these/research/articles_redaction/paic_methodological_review"
article_table_path <- file.path(article_path, "tables")
article_figure_path <- file.path(article_path, "figures")
```



```{r}
# because for some reason tableby2word can't write in a subfolder directly
tableby2word <- function(tableby_obj, path, ...) {
  short_path <- str_extract(path, "(?<=/)[^/]*$")
  write2word(tableby_obj, short_path, quiet = TRUE, reference_docx = "word_style_ref_01.docx", ...)
  file.rename(short_path, path)
}
```

```{r}
# grouping last levels for display in tableby : eg for displaying only top countries 
# Meaningful if factor is ordered by frequency
grouping_last_levels <- function(x, n_first_levels, grouping_label = "Other") {
  last_levels <- levels(x)[n_first_levels + 1:length(levels(x))]
  new_names_last_levels <- rep(grouping_label, length(last_levels))
  new_levels <- c(levels(x)[1:n_first_levels], new_names_last_levels)
  levels(x) <- new_levels
  return(x)
}
```


```{r}
source("questions_sections.R")
renaming_questions_list <- flatten_list(questions_sections)
```


```{r }
separate_elements <- function(col, ...) {
  col %>% 
    lapply(function(elem) {
      elem_bis <- unlist(elem)
      ifelse(length(elem_bis) != 1,
             unlist(elem_bis) %>%
               round(1) %>%
               paste0(collapse = ' (') %>%
               paste0(')'),
             elem_bis
      )}) %>% 
    as.character()
}
```


```{r DM tableby to flextable}
set_flextable_defaults(padding.top = 2, padding.bottom = 1)

format_flextable <- function(flextable_obj) {
  # indic_hlines <- (which(!is.na(flextable_obj$body$dataset$variable)) - 1)
  # indic_hlines <- indic_hlines[2:length(indic_hlines)]
  
  indic_hlines <- rle(flextable_obj$body$dataset$variable)$lengths %>%
    accumulate(.f = add)

  ncols <- ncol(flextable_obj$body$dataset)
  WIDTH_WORD <- 16
  flextable_obj %>%   
    set_header_labels(values = c("variable" = "",
                                 "modalities" = "")) %>%
    add_header_row(values = c("", "n (%)"), colwidths = c(2, ncols - 2), top = TRUE) %>%
    align(i = 1, j = 1:2, align = "center", part = "header") %>% 
    theme_booktabs() %>% 
    align(j = 1, align = "left", part  = "all") %>% 
    align(j = 2, align = "right", part = "all") %>% 
    align(j = 3:ncol_keys(.), align = "center", part  = "all") %>% 
    padding(padding.top = 2, padding.bottom = 1, part = "body") %>% 
    bold(j = 1) %>% 
    bold(i = c(1, 2), part = "header") %>% 
    hline(i = indic_hlines, part = "body", border = officer::fp_border(width = 2)) %>%
    hline(i = 2, part = "header", border = officer::fp_border(width = 2)) %>% 
    width(j = NULL, WIDTH_WORD / ncols, unit = "cm") %>% 
    width(j = "Total", width = 4, unit = "cm") %>% 
    merge_v(j = 1, target = "variable") %>% 
    line_spacing(i = NULL, j = NULL, space = 2, part = "header") %>% 
    line_spacing(i = NULL, j = NULL, space = 1, part = "body")
}

tableby_to_flextable <- function(tableby_obj, ...) {
  tableby_df <- tableby_obj %>% as_tibble()
  col_names <- tableby_df %>% select(...) %>% names()
  
  any_strata <- length(unique(tableby_df[["strata.term"]])) != 1
  # if(any_strata) {
  #   rle_out <- rle(tableby_df$strata.term)
  #   indices <- c(1, 1 + rle_out$lengths[length(rle_out$values) -1])
  #   tableby_df[, "strata.term"] <- ""
  #   tableby_df[indices, "strata.term"] <- rle_out$values
  # }
  tableby_df %>% 
    select(any_of(ifelse(any_strata, "strata.term", "__discard__")),
           variable = term, modalities = label, all_of(col_names)) %>% 
    mutate(across(any_of("p.value"), \(x) format.pval(x, nsmall = 1, digits = 1))) %>% 
    mutate(variable = if_else(Total == "", modalities, NA_character_), 
           modalities = if_else(Total != "", modalities, NA_character_)) %>% 
    mutate(across(.cols = all_of(col_names), .fns = separate_elements), 
           variable = replace_in_vec(variable, swap_names_values(renaming_questions_list))) %>%
    tidyr::fill(variable, .direction = "down") %>% 
    filter(modalities != "No" | is.na(modalities)) %>% 
    # filter(!is.na(modalities)) %>% 
    flextable()
}
```


```{r tableby to kable}
dm_tableby <- function(tableby_obj, ...) {
  tableby_df <- tableby_obj %>% as_tibble()
  
  col_names <- tableby_df %>% select(...) %>% names()
  
  any_strata <- length(unique(tableby_df[["strata.term"]])) != 1
  if(any_strata) {
    rle_out <- rle(tableby_df$strata.term)
    indices <- c(1, 1 + rle_out$lengths[length(rle_out$values) -1])
    tableby_df[, "strata.term"] <- ""
    tableby_df[indices, "strata.term"] <- rle_out$values
  }
  
  tableby_df_dm <- tableby_df %>% 
    select(any_of(ifelse(any_strata, "strata.term", "__discard__")),
           variable = term, modalities = label, all_of(col_names)) %>% 
    mutate(variable = if_else(Total == "", modalities, NA_character_), 
           modalities = if_else(Total != "", modalities, NA_character_)
    ) %>% 
    mutate(across(.cols = all_of(col_names), .fns = separate_elements), 
           variable = replace_in_vec(variable, swap_names_values(renaming_questions_list)))
  
  indic_hlines <- (which(!is.na(tableby_df_dm$variable)))
  indic_hlines <- indic_hlines
  ncols <- ncol(tableby_df_dm)
  tableby_df_dm 
  # # kable(format = "latex") 
  #   kbl(format = "latex", booktabs = T) 
}
```


```{r}
included_articles_info <- read_csv("data/included_articles_info.csv", 
                                   col_types = cols(.default = "c"))
results_df <- read_tsv("data/to_use_for_stats/long_results_final.tsv",
                       col_types = cols(.default = "c"))
ttt_mapped <- read_tsv("data/to_use_for_stats/decision_atc_mapped.tsv",
                       col_types = cols(.default = "c", car_t_cells = "l")) %>% 
  rename(treatment_name = answer)
conditions_mapped <- read_tsv("data/to_use_for_stats/decision_icd_mapped.tsv",
                              col_types = cols(.default = "c"))
```


```{r Creating section data frames}
general_information_df <- results_df[results_df$section == "general_information", c("doi", "questions", "answer")]
individual_study_df <- results_df[results_df$section == "study_information",]
paic_results <- results_df[results_df$section %in% c("methodology", "results"), ]
```

# DM articles comparison level

```{r Wide methodo}
comparison_level_df <- paic_results %>% 
  pivot_wider(id_cols = c(doi, n_itc), names_from = questions, values_from = answer)
```


# DM Articles general Information

```{r}
articles_level_df <- general_information_df %>% 
  pivot_wider(id_cols = doi, names_from = questions, values_from = answer) %>% 
  # adding articles information
  left_join(included_articles_info, by = "doi") %>% 
  # adding conditions information
  left_join(conditions_mapped, by = "condition_name") 
stopifnot(!any(is.na(articles_level_df$`concept_name_ICD10 Chapter`)))
```

```{r DM authors affiliations}
articles_level_df <- articles_level_df %>% 
  # Manually correcting variation introduced during the review process 
  mutate(positions = if_else(
    positions == "Academic, Private Data Analysis Company, Pharmaceutical Industry",
    "Academic, Pharmaceutical Industry, Private Data Analysis Company",
    positions)) %>%
  mutate(positions_list = str_split(positions, ", "), 
         value_filling = c(TRUE)) %>% 
  unnest(positions_list) %>% 
  pivot_wider(names_from = positions_list, values_from = value_filling, values_fill = FALSE)
```

```{r Individual comparisons count}
articles_level_df <- articles_level_df[, "doi"] %>% 
  left_join(distinct(paic_results, doi, n_itc)) %>% 
  count(doi, name = "paic_count") %>% 
  right_join(articles_level_df)
  
```


```{r Various mutate steps: countries, year}
articles_level_df <- articles_level_df %>% 
  # Manually correcting variation introduced during the review process 
  mutate(across(c(country_first_author, country_last_author), 
         .fns = ~ ifelse(tolower(.x) %in% c("usa", "uk"),
                         str_to_upper(.x),
                         str_to_title(.x))), 
         publication_year = as.numeric(`publication year`), 
         funded_pharma = grepl(x = funding_source, pattern = "Pharmaceutical", perl = TRUE),
         pharma_authorship_funding = funded_pharma | `Pharmaceutical Industry`, 
         publication_date = as_date(edat, format = "%Y/%m/%d %H:%M")
  ) %>% 
  rename(journal_title = `journal/book`)
```

```{r, paic conducted per article}
articles_level_df <- comparison_level_df %>% 
  group_by(doi) %>% 
  summarise(at_least_one_maic = any(paic_type == "MAIC"), 
            at_least_one_stc = any(paic_type == "STC"),
            at_least_one_mlnmr = any(paic_type == "ML-NMR"), 
            at_least_other_paic = !any(
              at_least_one_maic,
              at_least_one_stc, 
              at_least_one_mlnmr)
            
  ) %>% 
  mutate( # to create a column to display in a table
    maic_char = ifelse(at_least_one_maic, "MAIC", NA), 
    stc_char = ifelse(at_least_one_stc, "STC", NA), 
    mlnmr_char = ifelse(at_least_one_mlnmr, "ML-NMR", NA), 
    other_char = ifelse(at_least_other_paic, "Other", NA)
  ) %>% 
  unite(
    maic_char , stc_char, mlnmr_char, other_char,
    col = paic_conducted, 
    sep = " & ", 
    na.rm = TRUE) %>% 
  left_join( {
    comparison_level_df %>% 
      group_by(doi) %>% 
      summarise(at_least_one_anchored = any(anchored_yn == "Yes"), 
                at_least_one_unanchored = any(anchored_yn == "No")
      ) %>% 
      mutate( anchored_char = ifelse(at_least_one_anchored, "anchored", NA), 
              unanchored_char = ifelse(at_least_one_unanchored, "unanchored", NA)
      ) %>% 
      unite(
        anchored_char, unanchored_char,
        col = anchored_conducted, 
        sep = " & ", 
        na.rm = TRUE) 
  }) %>% 
  select(doi, paic_conducted, anchored_conducted) %>% 
  set_labels(c(
    "paic_conducted" = "PAIC conducted",
    "anchored_conducted" = "Anchored conducted"
  )) %>% 
  right_join(articles_level_df)
```  


# Statistics article level

```{r}
formula_article_level <- formulize(y = "", x = ".")
```


```{r}
description_articles <- articles_level_df %>% 
  select(publication_date, publication_year, country_first_author, country_last_author, methodologist_yn, 
         `Pharmaceutical Industry`, Academic, `Private Data Analysis Company`, positions,
         journal_title, `concept_name_ICD10 Chapter`, pharma_authorship_funding, 
         paic_count, paic_conducted, anchored_conducted, systematic_review_yn) %>% 
  mutate(publication_year = as.factor(ifelse(publication_year < 2020,
                                               "January 1st 2010 - December 31st 2019",
                                               "January 1st 2020 - April 2nd 2022")),
         across(where(is.logical), 
                .fns = ~ factor(ifelse(.x, "Yes", "No"), levels = c("Yes", "No"))),
         across(c(country_first_author, country_last_author), 
                .fns = ~ fct_infreq(.x) %>% grouping_last_levels(n_first_levels = 3)), 
         methodologist_yn = fct_infreq(methodologist_yn),
         journal_title = grouping_last_levels(fct_infreq(journal_title), 6), 
         `concept_name_ICD10 Chapter` = grouping_last_levels(fct_infreq(`concept_name_ICD10 Chapter`), 6)
  ) %>% 
  set_labels(value = c("paic_count" = "Count PAIC", 
                        swap_names_values(renaming_questions_list),
                       "paic_conducted" = "Type of PAIC conducted", 
                       "description_articles" = "Publication date", 
                       "publication_year" = "Publication period", 
                       "journal_title" = "Journal Title", 
                       "concept_name_ICD10 Chapter" = "Condition (ICD-10 chapter)", 
                       "pharma_authorship_funding" = "Funded pharmaceutical industry", 
                       "methodologist_yn" = "Methodological department or CRO"
                       # Default label list in the end so previous labels overwrite it
                       )
  ) %>% 
  tableby(formula_article_level, 
          data = ., 
          numeric.stats = c("sum", "mean", "median", "q1q3", "max"), 
          date.stats = c("Nmiss", "median", "q1q3"),
          digits = 1L
          )
```

```{r}
tableby_to_flextable(description_articles, Total) %>% 
  format_flextable() %>% 
  set_header_labels(values = c("Total" = glue::glue("Total (n = {nrow(articles_level_df)})"))) 
# %>%
  # flextable::save_as_docx(path = file.path(article_table_path, "/articles_information_table.docx"))
```

### Table 1 X methodologist

```{r}
### Methodologist
description_articles_methodo <- articles_level_df %>% 
  select(publication_date, publication_year, country_first_author, country_last_author, methodologist_yn, 
         `Pharmaceutical Industry`, Academic, `Private Data Analysis Company`, positions,
         journal_title, `concept_name_ICD10 Chapter`, pharma_authorship_funding, 
         paic_count, paic_conducted, anchored_conducted, systematic_review_yn) %>% 
  mutate(publication_year = as.factor(ifelse(publication_year < 2020,
                                               "January 1st 2010 - December 31st 2019",
                                               "January 1st 2020 - April 2nd 2022")),
         across(where(is.logical), 
                .fns = ~ factor(ifelse(.x, "Yes", "No"), levels = c("Yes", "No"))),
         across(c(country_first_author, country_last_author), 
                .fns = ~ fct_infreq(.x) %>% grouping_last_levels(n_first_levels = 3)), 
         methodologist_yn = fct_infreq(methodologist_yn),
         journal_title = grouping_last_levels(fct_infreq(journal_title), 6), 
         `concept_name_ICD10 Chapter` = grouping_last_levels(fct_infreq(`concept_name_ICD10 Chapter`), 6)
  ) %>% 
  set_labels(value = c("paic_count" = "Count PAIC", 
                        swap_names_values(renaming_questions_list),
                       "paic_conducted" = "Type of PAIC conducted", 
                       "publication_date" = "Publication date", 
                       "publication_year" = "Publication period", 
                       "journal_title" = "Journal Title", 
                       "concept_name_ICD10 Chapter" = "Condition (ICD-10 chapter)", 
                       "pharma_authorship_funding" = "Funded pharmaceutical industry", 
                       "methodologist_yn" = "Methodological department or CRO"
                       # Default label list in the end so previous labels overwrite it
                       )
  ) %>% 
  tableby(methodologist_yn ~ ., 
          data = ., 
          numeric.stats = c("sum", "mean", "median", "q1q3", "max"), 
          digits = 1L, 
          control = tableby.control(cat.test = "fe", numeric.test = "kwt")
          )
```

```{r}
tableby_to_flextable(description_articles_methodo, Yes, `Not mentioned`, Total, `p.value`) %>% 
  format_flextable() %>% 
  set_header_labels(values = c("Total" = glue::glue("Total (n = {nrow(articles_level_df)})"))) 
# %>% 
#   flextable::save_as_docx(path = file.path(article_table_path, "/articles_information_table_methodo.docx"))
```



### Table 1 X Academics

```{r}
### Academics
description_articles_academics <- articles_level_df %>% 
  select(publication_date, publication_year, country_first_author, country_last_author, methodologist_yn, 
         `Pharmaceutical Industry`, Academic, `Private Data Analysis Company`, positions,
         journal_title, `concept_name_ICD10 Chapter`, pharma_authorship_funding, 
         paic_count, paic_conducted, anchored_conducted, systematic_review_yn) %>% 
  mutate(publication_year = as.factor(ifelse(publication_year < 2020,
                                               "January 1st 2010 - December 31st 2019",
                                               "January 1st 2020 - April 2nd 2022")),
         across(where(is.logical), 
                .fns = ~ factor(ifelse(.x, "Yes", "No"), levels = c("Yes", "No"))),
         across(c(country_first_author, country_last_author), 
                .fns = ~ fct_infreq(.x) %>% grouping_last_levels(n_first_levels = 3)), 
         methodologist_yn = fct_infreq(methodologist_yn),
         journal_title = grouping_last_levels(fct_infreq(journal_title), 6), 
         `concept_name_ICD10 Chapter` = grouping_last_levels(fct_infreq(`concept_name_ICD10 Chapter`), 6)
  ) %>% 
  set_labels(value = c("paic_count" = "Count PAIC", 
                        swap_names_values(renaming_questions_list),
                       "paic_conducted" = "Type of PAIC conducted", 
                       "publication_date" = "Publication date", 
                       "publication_year" = "Publication period", 
                       "journal_title" = "Journal Title", 
                       "concept_name_ICD10 Chapter" = "Condition (ICD-10 chapter)", 
                       "pharma_authorship_funding" = "Funded pharmaceutical industry", 
                       "methodologist_yn" = "Methodological department or CRO"
                       # Default label list in the end so previous labels overwrite it
                       )
  ) %>% 
  tableby(Academic ~ ., 
          data = ., 
          numeric.stats = c("sum", "mean", "median", "q1q3", "max"), 
          date.stats = c("Nmiss", "median", "q1q3"),
          digits = 1L
          )
```

```{r}
tableby_to_flextable(description_articles_academics, Yes, No, Total, `p.value`) %>% 
  format_flextable() %>% 
  set_header_labels(values = c("Total" = glue::glue("Total (n = {nrow(articles_level_df)})"))) 
# %>% 
  # flextable::save_as_docx(path = file.path(article_table_path, "/articles_information_table_academics.docx"))
```





```{r Journaux valides Sorbonne}

valid_journals <- read_delim("data/journals/list_sorbonne.txt", delim = "\\n") %>% 
  set_names("journal_title") %>% 
  separate(col = "journal_title", sep = "\\t", into = c("long_name", "short_name")) %>% 
  mutate(across(.fns = tolower))

journals_titles <- distinct(articles_level_df, journal_title, jt) %>% 
  mutate(across(.fns = tolower))
init <- journals_titles %>% 
  semi_join(valid_journals, by = c("journal_title" = "short_name"))

init_long <- journals_titles %>% 
  semi_join(valid_journals, by = c("jt" = "long_name"))

white_list <- bind_rows(init, init_long) %>%
  distinct() %>% 
  # adding manually identified articles to the list
  bind_rows(tibble(
    journal_title = c("ejc suppl", "oncologist"), 
    jt = c("ejc supplements : ejc : official journal of eortc, european organization for  research and treatment of cancer ... [et al.]", 
    "the oncologist"))) %>% 
  mutate(in_sorbonne_list = TRUE)

black_list <- anti_join(journals_titles, white_list)

articles_level_df %>% 
  mutate(jt = tolower(jt)) %>% 
  select(doi, jt) %>% 
  left_join(white_list[ ,c("jt", "in_sorbonne_list")]) %>% 
  count(in_sorbonne_list)

```

```{r IF}
journals_if <- read_csv("data/journals/JCR2020_CompleteList.csv", col_types = c(.default = "c")) %>% 
  select(journal_title_long = `Full Journal Title`, 
         IF = `Journal Impact Factor`) %>% 
  mutate(IF = as.numeric(str_trim(IF)), 
         journal_title_long = tolower(journal_title_long))

df_journal_title <- articles_level_df %>% 
  mutate(journal_title_long = tolower(jt)) %>% 
  distinct(journal_title_long, is) %>% 
  left_join(journals_if)

test <- read_csv("data/journals/journals_IF_2020_modified.csv")

write_csv(df_journal_title, "data/journals/journals_IF_2020_modified.csv")
```


```{r IF}
journals_if <- read_csv("data/journals/journals_IF_2020_modified.csv")  %>% 
  # because some have several ISSN notations
  distinct(journal_title_long, IF)

journals_if %>% count(is.na(IF))
journals_if %>% summarise(mean_if = mean(IF, na.rm = TRUE),
                          median_if = median(IF, na.rm = TRUE), 
                          q1 = quantile(IF, 0.25, na.rm = TRUE),
                          q3 = quantile(IF, 0.75, na.rm = TRUE), 
                          min = min(IF, na.rm = TRUE),
                          max = max(IF, na.rm = TRUE)
)
articles_level_df %>% 
  mutate(jt = tolower(jt)) %>% 
  left_join(
  journals_if, by = c("jt" = "journal_title_long")) %>% 
  select(doi, jt, IF) %>% 
  mutate(jt = stringr::str_to_sentence(jt)) %>% 
  summarise(median_if = median(IF, na.rm = TRUE),
            mean_if = mean(IF, na.rm = TRUE), 
            min_if = min(IF, na.rm = TRUE), 
            max_if = max(IF, na.rm = TRUE), 
            n_missing = sum(is.na(IF)), 
            q1 = quantile(IF, 0.25, na.rm = TRUE),
            q3 = quantile(IF, 0.75, na.rm = TRUE)
  )
```


## Plots

### Journals

```{r Publication journals, fig.height=18}
#TODO: rajouter IF
## Authors specific affiliations would need to be parsed and retrieved through pubv1_info.txt --> regex looking at ". " preceded by a ", " or "^"
articles_level_df %>%
  mutate("journal_title" = jt,
         "journal_title_short" = ta) %>%
  group_by(journal_title_short) %>%
  summarise(count = n()) %>%
  arrange(desc(count)) %>%
  ggplot(aes(x = reorder(journal_title_short, count), y = count, label = count)) +
  geom_bar(stat = "identity") +
  geom_label() + 
  theme(axis.text.y = element_text(size = 12)) +
  scale_x_discrete() +
  coord_flip() +
  labs(title = "Publication journals",
       x = "Journals",
       y = "Articles count")
```

### Publication date

```{r Publication year }
library(extrafont)
loadfonts(device = "win")

publication_date_df <- articles_level_df %>%
  select(pmid, edat) %>%
  mutate(publication_date = as_date(edat, format = "%Y/%m/%d %H:%M"),
         publication_year = year(publication_date),
         publication_date_q = lubridate::quarter(publication_date, with_year = TRUE),
         publication_date_s = lubridate::semester(publication_date, with_year = TRUE),
         publication_date_s = ifelse(round(publication_date_s %% 0.2, 1) == 0.1,
                                      trunc(publication_date_s),
                                      trunc(publication_date_s) + 0.5)) %>%
  left_join(included_articles_info[, c("pmid", "doi")], by ="pmid")
```


```{r}
articles_level_df %>% 
  # filter(publication_year < 2022) %>%
  group_by(publication_year) %>%
  summarise(count = n()) %>%
  ggplot(aes(x = publication_year, y = count)) +
  geom_bar(stat = "identity") +
  geom_label(aes(label = count, y = count + 2),
             size = 2.5,
             show.legend = FALSE) + 
  scale_x_continuous(breaks = seq(from = 2011, to = 2022, by = 1), 
                     labels = function(breaks) ifelse(as.character(breaks) == "2022", 
                                                      "2022*", 
                                                      as.character(breaks))) +
  labs(title = NULL,
       x = NULL,
       y = NULL, 
       fill = NULL
  ) +
  theme(
    axis.text = element_text(size = 7),
    line = element_line(linewidth = 0.15)
  )

# ggsave(filename = file.path(article_figure_path, "publication_year_articles.tiff"), height = 15, width = 20, units = "cm")
# ggsave(filename = file.path(article_figure_path, "publication_year_articles.eps"), height = 15, width = 20, units = "cm")
# ggsave(filename = file.path(article_figure_path, "publication_year_articles.tiff"), height = 7.5, width = 10, units = "cm")

```


```{r Publication year plots}
plot_publication_year <- publication_date_df %>%
  filter(publication_year < 2022) %>%
  group_by(publication_year) %>%
  summarise(count = n()) %>%
  ggplot(aes(x = publication_year, y = count)) +
  geom_bar(stat = "identity", fill = "#1c2474") +
  scale_x_continuous(breaks = seq(from = 2011, to = 2021, by = 2)) +
  labs(title = NULL,
       x = NULL,
       y = NULL)
# Saint-Malo
plot_publication_year +
  theme(axis.text = element_text(size = 20, face = "bold"), 
        text = element_text("Goudy Old Style", face = "bold")) + 
  annotate(geom = "text", x = 2015, y = 33, label = "Publication count per year", size = 9, family = "Goudy Old Style") 
# ggsave("C:/Users/aserret-larmande/Documents/these/research/articles_redaction/paic_methodological_review/Posters st-malo/figures/n_publications_years.png", height = 7, width = 20, unit = "cm")

plot_publication_year + 
    theme(axis.text = element_text(size = 12, face = "bold")) + 
  labs(x = "Years", y = "Publication Count")
# ggsave("./figures/n_publications_years.png", height = 7, width = 20, unit = "cm")


```


```{r Intervals between articles received and accepted}
publication_dates_df <- articles_level_df %>% mutate(
  received_date = str_extract(phst, "[^\\].]+(?=\\[received\\])") %>% str_trim() %>% as_datetime(format = "%Y/%m/%d %H:%M"),
  accepted_date = str_extract(phst, "[^\\].]+(?=\\[accepted\\])") %>% str_trim() %>% as_datetime(format = "%Y/%m/%d %H:%M"),
  pubmed_date = str_extract(phst, "[^\\].]+(?=\\[pubmed\\])") %>% str_trim() %>% as_datetime(format = "%Y/%m/%d %H:%M"), 
  time_acceptation = accepted_date - received_date, 
  time_publication_pubmed = pubmed_date - received_date
) %>% 
  select(phst, received_date, accepted_date, time_acceptation, time_publication_pubmed, pubmed_date, pmid, pt, ta, pl, jt)

publication_dates_df %>% 
  pivot_longer(cols = c(time_acceptation, time_publication_pubmed), names_to = "time_type", values_to = "time") %>% 
  mutate(time = time/30.5) %>% 
  ggplot(aes(x = time)) + 
  facet_wrap(~ time_type) +
  # warning here
  geom_histogram() + 
  labs(x = "Time in months", "publication count", 
       title = "Time between submission and acceptation")
```
### Author's position

```{r }
articles_level_df %>% 
  count(positions) %>% {
    ggplot(., aes(x = positions, y = n)) +
      geom_bar(stat = "identity") +
      geom_label(aes(label = n), 
                 position = position_stack(vjust = 0.5)) + 
      coord_flip() + 
      scale_x_discrete(limits = rev(.$positions)) +
      labs(x = NULL, y = "Articles count", title = "Authors' positions") +
      theme(axis.text.y = element_text(size = 8))
  }
```


```{r}
articles_level_df %>% 
  pivot_longer(cols = c(Academic, `Pharmaceutical Industry`, `Private Data Analysis Company`), 
               names_to = "position") %>% 
  filter(value) %>% 
  count(position) %>% 
  ggplot(aes(x = position, y = n)) +
  geom_bar(stat = "identity") +
  geom_label(aes(y = 150, label = n),
             position = position_stack(vjust = 0.5),
             color = "black",
             show.legend = FALSE) + 
  labs(title = "Authors' positions",
       subtitle = "At least one author affiliated with: ", 
       y = "Articles count", 
       x = "Positions")
```


```{r }
articles_level_df %>% 
  mutate(collaboration = Academic & `Pharmaceutical Industry`) %>% 
  count(collaboration) %>% 
  ggplot(aes(x = collaboration, y = n)) + 
  geom_bar(stat = "identity") + 
  geom_label(aes(label = n, y = 30)) +
  scale_x_discrete(labels = c(`FALSE` = "No collaboration", `TRUE` = "Collaboration")) +
  labs(x = NULL, 
       y = "Articles count", 
       title = "Academics/Pharmaceutical Collaborations")
```

#### First and last authors country

```{r}
articles_level_df %>% 
  pivot_longer(cols = c(country_first_author, country_last_author), 
               names_to = "author", 
               values_to = "country") %>% 
  count(author, country) %>%
  ggplot(aes(x = reorder(country, n), y = n)) + 
  geom_bar(stat = "identity") + 
  facet_grid(" ~ author") + 
  coord_flip() + 
  labs(title = "Countries", 
       x = NULL, 
       y = "Article count")
```

### Methodology departments


```{r}
articles_level_df %>% 
  count(methodologist_yn) %>% 
  ggplot(aes(x = methodologist_yn, y = n, label = n)) +
  geom_bar(stat = "identity") +
  geom_label() +
  labs(x = "Affiliation with a methodology department/data-analysis company", 
       title = "Involvement of a Methodology department/data-analysis company", 
       y = "Count")
```

### Ties with pharmaceutical industry 



```{r}
ties_w_pharma_df <- articles_level_df %>% 
  select(positions, funding_source, doi) %>% 
  mutate(ties_pharma = ifelse(grepl("Pharmaceutical", positions) | grepl("Pharmaceutical Industry", funding_source), TRUE, FALSE))

```

```{r}
articles_level_df %>% 
  count(pharmaceutical_ties_yn) %>% 
  ggplot(aes(x = pharmaceutical_ties_yn, y = n, label = n)) +
  geom_bar(stat = "identity") +
  geom_label() +
  coord_flip() + 
  labs(x = NULL,
       title = "Ties with pharma in COI section", 
       y = "Count")
```


### Fundings

```{r}
articles_level_df %>% 
  count(funding_source) %>% 
  ggplot(aes(x = funding_source, y = n, label = n)) +
  geom_bar(stat = "identity") +
  geom_label() +
  coord_flip() + 
  labs(x = NULL,
       title = "Mentioned of source of fundings", 
       y = "Count")
```

### Conditions

```{r fig.width=12, fig.height=10}
articles_level_df %>% 
  count(`concept_name_ICD10 Hierarchy`, `concept_code_ICD10 Hierarchy`) %>% 
  mutate(across(where(is.character), as.factor)) %>% 
  ggplot(aes(x = reorder(`concept_name_ICD10 Hierarchy`, as.numeric(`concept_code_ICD10 Hierarchy`)),
             y = n, 
             label = n)
  ) + 
  geom_bar(stat = "identity") +
  geom_label() + 
  coord_flip() +
  scale_y_discrete() + 
  labs(x = NULL, 
       y = "Articles count", 
       title = "Investigated Condition", 
       subtitle = "By ICD-10 Subchapter")

```


```{r fig.width=12}
articles_level_df %>% 
  count(`concept_name_ICD10 Chapter`, `concept_code_ICD10 Chapter`) %>% 
  mutate(across(where(is.character), as.factor)) %>% 
  ggplot(aes(x = reorder(`concept_name_ICD10 Chapter`, as.numeric(`concept_code_ICD10 Chapter`)),
             y = n, 
             label = n)
  ) + 
  geom_bar(stat = "identity") +
  geom_label() + 
  coord_flip() + 
  labs(x = NULL, 
       y = "Articles count", 
       title = "Investigated condition", 
       subtitle = "By ICD-10 Chapter")

```

# Individual studies level 

```{r, results='asis'}
individual_studies_questions <- c(
  "ipd_yn", 
  "ct_yn", 
  "country_study",
  # "ct_phase", 
  "ct_arms"
)

study_level_df <- individual_study_df %>% 
  mutate(answer = str_to_title(answer)) %>% 
  #TODO: fix this "Xx'
  filter(answer != "Xx") %>%
  pivot_wider(names_from = questions, values_from = answer) %>% 
  mutate(ct_arms = ifelse(ct_arms == "??", NA, ct_arms), 
         ct_phase = str_split(ct_phase, ",") %>% map(~ str_squish(.x)), 
         country_study = country_study %>% 
           replace_in_vec(c("Unknown" = NA)) %>%
           fct_infreq() %>% 
           grouping_last_levels(5, "Others")) %>% 
  unnest_longer(ct_phase) %>%
  arrange(ct_phase) %>% 
  mutate(filler = TRUE, 
         ct_arms = ifelse(ct_yn == "Yes" & is.na(ct_arms), "Unknown", ct_arms),
         ct_phase = ifelse(ct_yn == "Yes" & is.na(ct_phase), "Unknown", ct_phase)) %>%
  pivot_wider(names_from = ct_phase, values_from = filler, values_fill = FALSE) %>% 
  rename(
    "Phase 1" = "1", 
    "Phase 2" = "2", 
    "Phase 3" = "3",
    "Phase 4" = "4",
    "Phase unknown" = "Unknown",
    "Phase: NA" = `NA`) %>% 
  set_labels(c("Country where the clinical trial/observational study was conducted (international if more than one" = "Country"))

description_individual_studies <- study_level_df %>% 
  select(all_of(c(individual_studies_questions, 
                  "Phase 1", "Phase 2", "Phase 3", "Phase 4", "Phase unknown", "Phase: NA"))) %>% 
  tableby(ipd_yn ~ ., data = .) 
```

```{r}
summary(description_individual_studies, term.name = TRUE)
```

```{r}
tableby_to_flextable(description_individual_studies, Yes, No, Total) %>% 
  format_flextable() %>% 
  set_header_labels(values = c("Total" = glue::glue("Total (n = {nrow(study_level_df)})"), 
                               "Yes" = "IPD", 
                               "No" = "Aggregated data"))
# %>%
  # align(j = 2, part = "header", align = "center") %>% 
  # save_as_docx(path = file.path(article_table_path, "description_individual_studies.docx"))
# tableby2word(description_individual_studies,file.path(article_table_path, "description_individual_studies.docx"))
```

```{r}
# Getting anchored PAIC using observational data
# EDIT: none of them
study_level_df %>% 
  select(-n_itc) %>% 
  filter(ct_yn == "No") %>% 
  inner_join(comparison_level_df, by = "doi", relationship = "many-to-many") %>% 
  filter(anchored_yn == "No")

```



# Comparison level

## DM comparisons df

```{r Renaming answers}
comparison_level_df <- comparison_level_df %>% 
  mutate(paic_type = ifelse(paic_type == "Multilevel network meta-regression", "ML-NMR", paic_type))
```


```{r data management to determine IPD/nonIPD treatments}
ttt_df <- paic_results %>% 
  select(doi, section, n_itc, questions, answer) %>% 
  filter(str_detect(questions,
                    pattern = c("(treatment_name)|(studies_number)"))) %>% 
  separate(questions, into = c("questions", "data_type"), 
           sep = "_(?=[^_]+$)"
  ) %>% 
  pivot_wider(names_from = questions, 
              values_from = answer) %>% 
  mutate(studies_number = str_split(studies_number, ";")) %>% 
  unnest_longer(studies_number) %>% 
  left_join(individual_study_df %>% 
              filter(questions == "ipd_yn") %>% 
              pivot_wider(names_from = questions, values_from = answer) %>% 
              mutate(ipd_yn = stringr::str_to_title(ipd_yn)) %>% 
              select(doi, study_number, ipd_yn), 
            by = c("doi" = "doi", "studies_number" = "study_number")
  )

stopifnot(
  "Some combinations of doi-n_itc-treatment are assigned both IPD and non IPD" =
    nrow(distinct(ttt_df, doi, n_itc, ipd_yn, treatment_name)) ==
    nrow(distinct(ttt_df, doi, n_itc, ipd_yn))
)

```

```{r Finding out similar comparisons, include=FALSE}

# ipd_non_ipd_df <- ttt_df %>%
#   distinct(doi, treatment_name, n_itc, ipd_yn) %>% 
#   left_join(distinct(ttt_mapped)) %>% 
#   pivot_wider(id_cols = c(doi, n_itc), names_from = c("ipd_yn"), values_from = "") %>% 
#   left_join(articles_level_df[, c("doi", "concept_name_ICD10 Hierarchy")], by = "doi") %>% 
#   distinct(doi, Yes, No, `concept_name_ICD10 Hierarchy`) %>% 
#   rename(condition = `concept_name_ICD10 Hierarchy`)
# 
# inverted_ipd <- ipd_non_ipd_df %>% 
#   mutate(Yes_temp = No, No = Yes, Yes = Yes_temp) %>% 
#   select(doi_inv = doi, Yes, No, condition)
# 
# same_comparisons <- inverted_ipd %>%
#   inner_join(ipd_non_ipd_df,
#              by = c("Yes", "No", "condition")) %>% 
#   select(doi, doi_inv, everything()) %>% 
#   filter(doi != doi_inv) %>% 
#   rowwise() %>% 
#   mutate(doi_pair = list(sort(c(doi, doi_inv)))) %>%
#   ungroup() %>% 
#   distinct(doi_pair, Yes, No, condition) %>% 
#   unnest_wider(doi_pair, names_sep = "_")

```

```{r DM Sample sizes}
wide_sample_size_df <- comparison_level_df %>% 
  select(doi, n_itc, anchored_yn, paic_type, matches("^ss_", )) %>%
  mutate(across(matches("^ss_", ), as.integer)) %>% 
  mutate(
    ss_total_ipd = case_when(
      !is.na(ss_total_ipd) ~ ss_total_ipd,
      anchored_yn == "No" ~ ss_ttt_ipd, 
      anchored_yn == "Yes" ~ ss_ttt_ipd + ss_anchor_ipd, 
      TRUE ~ NA_integer_),
    ss_total_nonipd = case_when(
      !is.na(ss_total_nonipd) ~ ss_total_nonipd,
      anchored_yn == "No" ~ ss_ttt_nonipd, 
      anchored_yn == "Yes" ~ ss_ttt_nonipd + ss_anchor_nonipd, 
      TRUE ~ NA_integer_),
    ss_adjusted_total_ipd = case_when(
      !is.na(ss_adjusted_total_ipd) ~ ss_adjusted_total_ipd,
      anchored_yn == "No" ~ ss_adjusted_ttt_ipd,
      anchored_yn == "Yes" ~ ss_adjusted_ttt_ipd + ss_adjusted_anchor_ipd,
      TRUE ~ NA_integer_)
  ) %>% 
  mutate(difference_adjusted_ttt = ss_ttt_ipd - ss_adjusted_ttt_ipd,
         difference_adjusted_anchor = ss_anchor_ipd - ss_adjusted_anchor_ipd, 
         difference_adjusted_total = ss_total_ipd - ss_adjusted_total_ipd, 
         rapport_adjusted_ttt = ss_adjusted_ttt_ipd / ss_ttt_ipd,
         rapport_adjusted_anchor = ss_adjusted_anchor_ipd / ss_anchor_ipd,
         rapport_adjusted_total = ss_adjusted_total_ipd / ss_total_ipd, 
         # anchored_yn = ifelse(anchored_yn == "Yes", "Anchored", "Unanchored"),
         ss_ipd_yn = ifelse(is.na(ss_total_ipd) & is.na(ss_ttt_ipd), "No", "Yes"), 
         ss_nonipd_yn = ifelse(is.na(ss_total_nonipd) & is.na(ss_ttt_nonipd), "No", "Yes"), 
         ss_adjusted_yn = ifelse(is.na(ss_adjusted_ttt_ipd) & is.na(ss_adjusted_total_ipd), "No", "Yes"),
         reduction_ess_percent = ifelse(paic_type == "MAIC", (1 - rapport_adjusted_total) * 100, NA)) %>% 
  select(-paic_type)

long_sample_size_df <- wide_sample_size_df %>% 
  select(-ss_ipd_yn, -ss_nonipd_yn, -ss_adjusted_yn, -anchored_yn) %>% 
  pivot_longer(cols = !c(doi, n_itc)) %>% 
  mutate(ipd_yn = case_when(
    grepl("total", name) ~ "Total",
    grepl("_ipd_", name) | grepl("ess_", name) ~ "IPD", 
    grepl("_nonipd_", name) ~ "Non IPD",
    TRUE ~ NA_character_
  ),
  sample_size_type = case_when(
    grepl("difference", name) ~ "Difference",
    grepl("rapport", name) ~ "Rapport", 
    grepl("adjusted", name) ~ "Adjusted (ESS)",
    TRUE ~ "Original")
  ) %>% 
  left_join(comparison_level_df[, c("doi", "n_itc", "paic_type")])

```


```{r DM correct specification}
stopifnot(all(unique(comparison_level_df$anchored_yn) %in% c("Yes", "No")))
stopifnot(all(unique(comparison_level_df$paic_type) %in% c("MAIC", "STC", "ML-NMR")))
stopifnot(all(unique(comparison_level_df$tem_yn) %in% c("Yes", "No discussion (in the main text) of the status of treatment-effect modifiers of the variables")))
model_specification_df <- comparison_level_df %>% 
  select(doi, n_itc, paic_type, anchored_yn, tem_yn, pf_yn) %>% 
  mutate(correct_adjustment =
           if_else(anchored_yn == "No", 
                   case_when( # Unanchored
                     tem_yn == "Yes" & pf_yn == "Yes" ~ "Yes", 
                     tem_yn == "Yes" & pf_yn == "No" ~ "Unanchored: No inclusion of PF",
                     str_starts(tem_yn, "No discussion") & str_starts(tem_yn, "No discussion") ~ "No mention of covariates' effects", 
                     TRUE ~ NA_character_
                   ), if_else( # Anchored
                     paic_type == "MAIC", 
                     case_when(
                       pf_yn == "Yes" ~ "Anchored MAIC: inclusion of PF",
                       str_starts(pf_yn, "No discussion") & tem_yn == "Yes" ~ "Anchored MAIC: inclusion of PF",
                       pf_yn == "No" & tem_yn == "Yes" ~ "Yes", 
                       str_starts(tem_yn, "No discussion") & str_starts(tem_yn, "No discussion") ~ "No mention of covariates' effects", 
                       TRUE ~ NA_character_),
                     case_when( # STC or MLNMR
                       tem_yn == "Yes" ~ "Yes",
                       tem_yn == "No discussion (in the main text) of the status of treatment-effect modifiers of the variables" ~ "No mention of covariates' effects", 
                       TRUE ~ NA_character_
                     )
                   )
           )
  ) %>% 
  select(doi, n_itc, correct_adjustment) %>% 
  mutate(correct_adjustment = factor(correct_adjustment,
                                     levels = c("Yes",
                                                "Anchored MAIC: inclusion of PF",
                                                "Unanchored: No inclusion of PF",
                                                "No mention of covariates' effects"))) 
stopifnot(all(!is.na(model_specification_df$correct_adjustment)))
```



```{r DM Variables selection, results='asis'}
variables_selection_df <- comparison_level_df %>% 
  select(doi, n_itc, variables_selection_justification) %>% 
  # because the complete item for this one is "Nothing mentioned, not reported", thus simplyfying it
  mutate(variables_selection_justification = variables_selection_justification %>% 
           tolower() %>% 
           str_split(",") %>% 
           map(~ str_trim(.x)) %>% 
           map(~ .x[.x != "not reported"])) %>%
  mutate(no_justification = sapply(variables_selection_justification,
                                   function(x) any(x == "nothing mentioned")),
         expertise = sapply(variables_selection_justification,
                            function(x) any(str_starts(x, "a priori expert-knowledge"))), 
         literature = sapply(variables_selection_justification,
                             function(x) any(str_starts(x, "literature based"))),
         statistics_ipd = sapply(variables_selection_justification,
                                 function(x) any(grepl("assessed in the ipd dataset", x, fixed = TRUE))), 
         imbalance = sapply(variables_selection_justification,
                            function(x) any(grepl("statistical imbalanced between", x, fixed = TRUE))),
         statistics_based = (statistics_ipd | imbalance), 
         only_statistics = statistics_based & !(expertise | literature),
         justification_char = if_else(expertise | literature, # Medical 
                                      if_else(!(imbalance | statistics_ipd), # Not statistical
                                              "A priori medical based only", 
                                              "Partly statistical based"), 
                                      if_else(imbalance | statistics_ipd, # Statistical
                                              "Only statistical based", 
                                              "No justification")
         ) %>% factor(levels = c("A priori medical based only",
                                 "Partly statistical based",
                                 "Only statistical based",
                                 "No justification")), 
  ) %>% 
  select(-variables_selection_justification)

```

```{r}
table(variables_selection_df$statistics_based)
table(variables_selection_df$only_statistics)
```


```{r DM variables adjustment}

covariates_adjustment_df <- comparison_level_df %>% 
  select(doi, n_itc, covariates_names, adjustment_geographical) %>% 
  mutate(
    covariates_names = str_replace_all(covariates_names,
                                       pattern = coll("Disease severity/disease history (ie past conditions or symptoms directly related to the disease of interest, eg history of venous thromboembolism in sickle cell disease)"), 
                                       replacement = "Disease history"), 
    covariates_names = str_replace_all(covariates_names, 
                                      pattern = coll("Performance score (ECOG PS, Karnofsky, Lansky, OMS, Ranson, ...)"), 
                                      replacement = "Performance score"
    ),
    covariates_list = covariates_names %>% 
      tolower() %>% 
      str_split(",") %>% 
      map(~ str_trim(.x)) , 
    adjustment_geographical = if_else(is.na(adjustment_geographical),
                                      FALSE, 
                                      if_else(adjustment_geographical == "Yes", TRUE, FALSE)
    )
  ) %>% 
  unnest_longer(covariates_list) %>% 
  mutate(filler = TRUE) %>% 
  pivot_wider(names_from = covariates_list, values_from = filler, values_fill = FALSE) %>% 
  rename(none = `NA`, 
         comorbidities = `comorbidities and medical history (beside pathology/disease of interest in the comparison)`, 
         others = `other(s)`, 
         past_treatments = `past treatments for the disease of interest`, 
         race_ethnicity = `race/ethnicity`, 
         history = `disease history`, 
         performance_score = `performance score`) %>% 
  mutate(comorbidities = if_else(others & !adjustment_geographical, TRUE, comorbidities)) %>% 
  mutate(across(c(adjustment_geographical, age, sex, others, comorbidities, past_treatments, race_ethnicity, history, performance_score), .fns = ~ ifelse(is.na(covariates_names), NA, .x))) %>% 
  select(-covariates_names, -adjustment_geographical, -none)
```

```{r DM contrast effect}
renaming_contrast <- c(
  "Incidence Rate Ratio" = "Relative difference", 
  "Rate ratio" = "Relative difference", 
  "OR" = "Relative difference", 
  "RR" = "Relative difference", 
  "Means Ratio" = "Relative difference", 
  "HR" = "Relative difference", 
  "Means difference" = "Absolute difference", 
  "Median difference" = "Absolute difference", 
  "RMST difference at 12 months" = "Absolute difference",
  "Risk difference" = "Absolute difference", 
  "Rate difference" = "Absolute difference", 
  "Proportion difference" = "Absolute difference",
  "Proportions difference" = "Absolute difference"
)

comparison_level_df <- comparison_level_df %>% 
   mutate(contrast_effect_type = replace_in_vec(contrast_effect_type, renaming_contrast))
```



```{r DM comparison level df}
comparison_level_df_dm <- comparison_level_df %>% 
  # left_join(ttt_df) %>% 
  # rename(atc_nonipd_first = first, 
  #        atc_nonipd_second = second, 
  #        atc_nonipd_third = third) %>% 
  mutate(
    # across(c(atc_ipd_first, atc_nonipd_first), 
    #             .fns = ~ grouping_last_levels(fct_infreq(.x), 5)), 
         paic_type = fct_infreq(paic_type), 
         anchored_yn = factor(anchored_yn, levels = c("Yes", "No")),
         covariates_n = as.numeric(covariates_n), 
         unadjusted_yn = !is.na(contrast_effect_unadjusted_value), 
         adjusted_yn = !is.na(contrast_effect_adjusted_value), 
         across(c(contrast_effect_unadjusted_value, contrast_effect_adjusted_value), as.numeric), 
         perc_change_effect = abs(contrast_effect_unadjusted_value - contrast_effect_adjusted_value) * 100 / abs(contrast_effect_unadjusted_value)
  ) %>% 
  # Dropping variables referring to sample sizes
  select(doi, n_itc, anchored_yn, !any_of(names(wide_sample_size_df))) %>% 
  # Adding sample size DM
  left_join(wide_sample_size_df) %>% 
  left_join(model_specification_df) %>% 
  left_join(variables_selection_df) %>% 
  left_join(covariates_adjustment_df) %>% 
  set_labels(swap_names_values(renaming_questions_list))
```



```{r Exploration of contrast effects}
comparison_level_df_dm %>% 
  group_by(contrast_effect_type, outcome_variable_type) %>% 
  count() %>% 
  pivot_wider(names_from = outcome_variable_type, 
              values_from = n)

comparison_level_df_dm %>% 
  filter(outcome_variable_type == "Binary (eg rates)", 
         contrast_effect_type == "Absolute difference") 

comparison_level_df_dm %>% 
  tableby(outcome_variable_type ~ contrast_effect_type, strata = paic_type, 
          data = .) %>% 
  tableby_to_flextable(`Binary (eg rates)`, `Continuous (count, mean, ...)`, `Time-to-event`, Total) %>%
  format_flextable() %>% 
  set_header_labels(values = c("Total" = glue::glue("Total (n = {nrow(comparison_level_df_dm)})"))) %>%
  line_spacing(i = NULL, j = NULL, space = 1, part = "body") %>%
  line_spacing(i = NULL, j = NULL, space = 2, part = "header") 
# TABLE MANUALLY FORMATTED
# %>% # 
#   flextable::save_as_docx(path = file.path(article_table_path,  "outcomes.docx"))
```

```{r DM: adjustment level data frame}
adjustment_level_df <- comparison_level_df %>% 
  select(doi, n_itc, contrast_effect_type, contrast_effect_direction,
         unadjusted_lb_ci, unadjusted_ub_ci,
         adjusted_lb_ci, adjusted_ub_ci, unadjusted_significant, adjusted_significant, 
         effect_cutoff, unadjusted_num_pval, adjusted_num_pval, contrast_effect_unadjusted_value, 
         contrast_effect_adjusted_value, direction_benefit, outcome_short_name) %>% 
  pivot_longer(names_pattern = "((?:un)?adjusted)(_)(.*)", 
               cols = !c(doi, n_itc, contrast_effect_type, contrast_effect_direction, direction_benefit, outcome_short_name, effect_cutoff), 
               names_to = c("adjustment", NA, "indicator"), 
               values_to = "values") %>%
  pivot_wider(id_cols = c(doi, n_itc, contrast_effect_type, contrast_effect_direction, adjustment, direction_benefit, outcome_short_name, effect_cutoff), 
              names_from = indicator, 
              values_from = values) %>% 
  rename(effect = value) %>% 
  mutate(across(c(lb_ci, ub_ci, num_pval, effect, effect_cutoff), as.numeric))

left_side_outcome <- adjustment_level_df %>% 
  filter(contrast_effect_direction == "Numerator if ratio, or left side if difference")

na_outcome <- adjustment_level_df %>% 
  filter(is.na(contrast_effect_direction))

right_side_outcome <- adjustment_level_df %>% 
  filter(contrast_effect_direction == "Denominator if ratio, or rightside if difference") %>% 
  mutate(across(c(lb_ci, ub_ci, effect),
                .fns = function(x) {
                  ifelse(effect_cutoff == 0, -x, ifelse(effect_cutoff == 1, 1/x, NA))
                })
  ) %>% 
  mutate(lb_ci_temp = ub_ci, 
         ub_ci = lb_ci, 
         lb_ci = lb_ci_temp, 
         lb_ci_temp = NULL)


adjustment_level_df <- bind_rows(left_side_outcome, right_side_outcome, na_outcome) %>%
  select(-contrast_effect_direction) %>%
# Creating binary variable distinguishing estimates beneficial for IPD:
  mutate(benefit_ipd = case_when(
    direction_benefit == "inferior" & effect <= effect_cutoff ~ TRUE,
    direction_benefit == "superior" & effect >= effect_cutoff ~ TRUE,
    !is.na(effect) ~ FALSE,
    TRUE ~ NA)
  )
```


```{r DM linking individual studies with comparison level df}

comparison_study_level_df <- comparison_level_df_dm %>% 
  pivot_longer(cols = c(studies_number_ipd, studies_number_nonipd), 
               names_to = "study_number_type", 
               values_to = "study_number") %>% 
  mutate(study_number = str_split(study_number, pattern = ";")) %>% 
  select(doi, n_itc, study_number_type, study_number) %>% 
  unnest_longer(study_number) %>% 
  left_join(study_level_df %>% select(-n_itc), by = c("doi", "study_number"))

# check that IPD information from comparison_level_df_dm and study_level_df is consistent
with(comparison_study_level_df, table(study_number_type, ipd_yn))

count_studies_per_itc <- comparison_study_level_df %>%
  group_by(doi, n_itc, ipd_yn) %>% 
  summarise(count = n()) %>% 
  pivot_wider(names_from = ipd_yn, values_from = count) %>% 
  ungroup()

count_studies_per_itc %>%
  rowwise() %>% 
  mutate(n_studies = sum(Yes, No)) %>% 
  ungroup() %>% 
  count(n_studies)


comparison_level_df_dm %>% 
  count(paic_form)

```


## Treatment levels: results 

#### DM treatments

```{r, DM treatments}
ttt_level_df <- comparison_level_df %>% 
  select(doi, n_itc, treatment_name_ipd, treatment_name_nonipd) %>%
  pivot_longer(cols = c(treatment_name_nonipd, treatment_name_ipd), 
               names_to = "type", 
               names_prefix = "treatment_name_", 
               values_to = "treatment_name") %>% 
  left_join(ttt_mapped) %>% 
  mutate(
    atc_third = case_when(
      !is.na(`concept_name_ancestor_ATC 3rd`) ~ `concept_name_ancestor_ATC 3rd`, 
      !is.na(others) ~ others, 
      TRUE ~ "No ATC 3rd level code"
  ), 
    atc_fourth = case_when(
      !is.na(`concept_name_ancestor_ATC 4th`) ~ `concept_name_ancestor_ATC 4th`, 
      !is.na(others) ~ others, 
      TRUE ~ "No ATC 4th level code"
  ), 
  atc_second = case_when(
    !is.na(`concept_name_ancestor_ATC 2nd`) ~ `concept_name_ancestor_ATC 2nd`, 
    !is.na(others) ~ others, 
    TRUE ~ "No ATC 2nd level code"
  )) %>% 
  # group_by(type) %>% 
  mutate(ttt_group = grouping_last_levels(fct_infreq(atc_third), 6, grouping_label = "Other treatments") %>%
           str_to_title()) %>% 
  rowwise() %>% 
  mutate(mab = 
           # use concept_name here, instead of treatment_parsed, to avoid having redundant count
           # for the treatments that haven't been parsed correctly
           str_detect(concept_name, "mab;") |
           # this last part of the regex doesn't happen to be necessary because all the mab are detected from their prefix name
           any(sapply(X = c(`concept_name_ancestor_ATC 3rd`, `concept_name_ancestor_ATC 4th`, `concept_name_ancestor_ATC 2nd`),
                      FUN = function(x) str_detect(x, regex("monoclonal", ignore_case = TRUE))), na.rm = TRUE)
  ) %>% 
  ungroup() %>% 
  mutate(mab = replace_na(mab, FALSE))

```



```{r}
results_ttt <- ttt_level_df %>%
  mutate(ttt_group = fct_infreq(ttt_group) %>% fct_relevel("Other Treatments", after = Inf)) %>% 
  set_labels(value = c("ttt_group" = "Treatment group (ATC 3rd level)", 
                       "car_t_cells" = "CAR-T Cells therapy", 
                       "mab" = "Monoclonal antibodies")) %>% 
  tableby(type ~ ttt_group + car_t_cells + mab, data = .) 
```


```{r}
results_ttt %>% 
  tableby_to_flextable(ipd, nonipd, Total) %>% 
  format_flextable() %>% 
  set_header_labels(values = c("ipd" = glue("IPD (n={n_ipd})", n_ipd = sum(ttt_level_df$type == "ipd")),
                               "nonipd" = glue("Aggregated data (n={n_nonipd})", n_nonipd = sum(ttt_level_df$type == "nonipd")),
                               "Total" = glue("Total (n={total})", total = nrow(ttt_level_df))))
  # save_as_docx(path = file.path(article_table_path, "results_ttt.docx"))
```

```{r}
ttt_level_df %>% 
  left_join(articles_level_df[, c("doi", "publication_year")]) %>% 
  filter(publication_year >= 2017) %>% 
  group_by(doi) %>% 
  summarize(mab = any(mab)) %>% 
  count(mab)
```


```{r Studying CAR-T cells}

ttt_level_df %>% 
  left_join(articles_level_df) %>%
  group_by(doi, publication_year) %>%
  summarise(mab = any(mab), .groups = "drop") %>% 
  mutate(mab = factor(mab, levels = c(FALSE, TRUE), labels = c("Does not involve MAB", "Involves MAB"))) %>% 
  group_by(publication_year, mab) %>% 
  summarise(count = n()) %>%
  mutate(perc = count / sum(count) * 100) %>% {
    ggplot(data = ., aes(x = publication_year, y = count)) +
      geom_bar(aes(fill = mab), stat = "identity") +
      #TODO: to fix, but removing the 'unknown' fill argument breaks the code
      geom_label(aes(fill = mab, label = paste0(format(perc, digits = 1, nsmall = 1), "%")),
                 position = position_stack(vjust = 0.5),
                 size = 1.3,
                 color = "white",
                 show.legend = FALSE) + 
      geom_label(data = group_by(., publication_year) %>% summarise(count = sum(count)), 
                 aes(label = count, 
                     y = count + 2.5),
                 size = 2, color = "black", show.legend = FALSE) +
      scale_x_continuous(breaks = seq(from = 2011, to = 2022, by = 1),
                         labels = function(breaks) ifelse(as.character(breaks) == "2022", 
                                                          "2022*", 
                                                          as.character(breaks))) +
      
      labs(title = NULL,
           x = NULL,
           y = NULL, 
           fill = NULL
      ) +
      theme(legend.position = "bottom",
            text = element_text(size = 7),
            axis.text = element_text(size = 7),
            line = element_line(linewidth = 0.15)
      )
  }

  
# ggsave(file.path(article_figure_path, "article_mab_per_year.png"), height = 15, width = 20, units = "cm")
# ggsave(file.path(article_figure_path, "article_mab_per_year.tiff"), height = 7.5, width = 10, units = "cm")

```




## Comparison level: methods

### Description comparisons

```{r }
description_comparisons <- comparison_level_df_dm %>%
  select(paic_type, anchored_yn, outcome_variable_type) %>% 
  set_labels(value = c("anchored_yn" = "Anchored comparison")) %>%
  tableby(~ ., data = .)
```



```{r}
description_comparisons %>% 
  tableby_to_flextable(Total) %>% 
  format_flextable() %>% 
  set_header_labels(values = c("Total" = glue::glue("Total (n = {nrow(comparison_level_df_dm)})"))) %>% 
  line_spacing(i = NULL, j = NULL, space = 1, part = "body") %>% 
  line_spacing(i = NULL, j = NULL, space = 2, part = "header") 
# %>% 
  # flextable::save_as_docx(path = file.path(article_table_path, "description_comparison.docx"))
# tableby2word(description_comparisons, file.path(article_table_path, "description_comparison.docx"))
```

#### Date and anchored/unanchored aspects

```{r}
comparison_level_df_dm %>% 
  left_join(publication_date_df[, c("doi", "publication_year")]) %>% 
  mutate(anchored_yn = factor(anchored_yn, levels = c("No", "Yes"), labels = c("Unanchored", "Anchored"))) %>% 
  # filter(publication_year < 2022) %>%
  group_by(publication_year, anchored_yn) %>%
  summarise(count = n()) %>%
  # group_by(publication_year) %>% 
  mutate(perc = count / sum(count) * 100) %>% {
    ggplot(data = ., aes(x = publication_year, y = count)) +
      geom_bar(aes(fill = anchored_yn), stat = "identity") +
      geom_label(aes(fill = anchored_yn, label = paste0(format(perc, digits = 1, nsmall = 1), "%")),
                 position = position_stack(vjust = 0.5),
                 size = 1.5,
                 color = "white",
                 show.legend = FALSE) + 
      geom_label(data = group_by(., publication_year) %>% summarise(count = sum(count)), 
                 aes(label = count, 
                     y = count + 3),
                 size = 2.5, color = "black", show.legend = FALSE) +
      scale_x_continuous(breaks = seq(from = 2011, to = 2022, by = 1),
                         labels = function(breaks) ifelse(as.character(breaks) == "2022", 
                                                          "2022*", 
                                                          as.character(breaks))) +
      labs(title = NULL,
           x = NULL,
           y = NULL, 
           fill = NULL
      ) +
      theme(legend.position = "bottom",
            legend.direction = "horizontal",
            text = element_text(size = 7),
            axis.text = element_text(size = 7),
            line = element_line(linewidth = 0.15)
      )
  }

# ggsave(filename = file.path(article_figure_path, "publication_year_anchored_yn.png"), height = 15, width = 20, units = "cm")
# ggsave(filename = file.path(article_figure_path, "publication_year_anchored_yn.tiff"), height = 7.5, width = 10, units = "cm")
```

```{r Proportion of anchored-unanchored comparison before-since 2019}
comparison_level_df_dm %>% 
left_join(publication_date_df[, c("doi", "publication_year")]) %>%
  mutate(publication_date = ifelse(publication_year < 2019, "before 2019", "since 2019")) %>%
  group_by(publication_date, anchored_yn) %>% summarise(count = n()) %>% mutate(perc = count / sum(count))

```


### Correct model adjustment

```{r}

correct_adjustment_df <- comparison_level_df_dm %>% 
  select(paic_type, anchored_yn, correct_adjustment) %>% 
  set_labels(value = c("correct_adjustment" = "Adequate variables selection", 
                       "anchored_yn" = "Anchored")) 

correct_adjustment <- correct_adjustment_df %>% 
  tableby(paic_type ~ correct_adjustment, data = ., 
          control = tableby.control(cat.droplevels = TRUE))
```

```{r}
summary(correct_adjustment)
```

```{r}
correct_adjustment %>%
  tableby_to_flextable(Total) %>%
  format_flextable() %>% 
  set_header_labels(values = c("Total" = glue::glue("Total (n = {nrow(comparison_level_df_dm)})"))) %>%
  line_spacing(i = NULL, j = NULL, space = 1, part = "body") %>%
  line_spacing(i = NULL, j = NULL, space = 2, part = "header") 
  # flextable::save_as_docx(path = file.path(article_table_path,  "correct_adjustment.docx"))


# tableby2word(correct_adjustment, "/correct_adjustment.docx")
```


### Correct variables justification 

```{r}
variables_justification_df <- comparison_level_df_dm %>% 
  select(no_justification, expertise, literature, statistics_ipd,
         imbalance, justification_char, anchored_yn) %>% 
  set_labels(c("no_justification" = "No justification", "expertise" = "Expertise", 
               "literature" = "Literature", "statistics_ipd" = "Statistical effect in the IPD dataset",
               "imbalance" = "Imbalance", "justification_char" = "Covariates justification"))   
variables_justification <- variables_justification_df %>% 
  tableby(anchored_yn ~ ., data = .)
```

```{r}
summary(variables_justification)
```

```{r}
variables_justification %>% 
  tableby_to_flextable(Total) %>% 
  format_flextable() %>% 
  set_header_labels(values = c("Total" = glue::glue("Total (n = {nrow(comparison_level_df_dm)})"))) 
# %>% 
  # flextable::save_as_docx(path = file.path(article_table_path, "variables_justification.docx"))
# tableby2word(variables_justification, "/variables_justification.docx")
```


### Main methodological aspects

```{r}
main_methods_df <- comparison_level_df_dm %>%
  left_join(articles_level_df[, c("doi", "systematic_review_yn", "publication_date", "methodologist_yn")] %>% 
              mutate(before_2018 = publication_date < as.Date("2018-01-01"))) %>% 
  mutate(primary_outcome_yn = replace_in_vec(
    primary_outcome_yn, 
    c("No primary outcome defined, or multiple primary outcomes without any clear distinction between them" = "No"))) %>% 
  select(systematic_review_yn, paic_type, primary_outcome_yn, ss_ipd_yn, ss_nonipd_yn, ss_adjusted_yn) %>% 
  set_labels(value = c("ss_ipd_yn" = "IPD", 
                       "ss_nonipd_yn" = "Non IPD", 
                       "ss_adjusted_yn" = "Adjusted", 
                       "systematic_review_yn" = "Systematic review", 
                       "primary_outcome_yn" = "Primary outcome"))

main_methods <- main_methods_df %>% 
  tableby( ~ ., data = .)

# same but essentially to get information stratified before/after 2018
comparison_level_df_dm %>%
  left_join(articles_level_df[, c("doi", "systematic_review_yn", "publication_date", "methodologist_yn")] %>% 
              mutate(before_2018 = publication_date < as.Date("2017-06-01"))) %>% 
  mutate(primary_outcome_yn = replace_in_vec(
    primary_outcome_yn, 
    c("No primary outcome defined, or multiple primary outcomes without any clear distinction between them" = "No"))) %>% 
  select(systematic_review_yn, paic_type, primary_outcome_yn, ss_ipd_yn, ss_nonipd_yn, ss_adjusted_yn, before_2018) %>% 
  set_labels(value = c("ss_ipd_yn" = "IPD", 
                       "ss_nonipd_yn" = "Non IPD", 
                       "ss_adjusted_yn" = "Adjusted", 
                       "systematic_review_yn" = "Systematic review", 
                       "primary_outcome_yn" = "Primary outcome")) %>% 
  tableby( paic_type ~ ., data = ., strata = before_2018) %>% 
  summary(text = TRUE)

```


```{r}
main_methods %>% 
  tableby_to_flextable(Total) %>% 
  format_flextable() %>% 
  set_header_labels(values = c("Total" = glue::glue("Total (n = {nrow(comparison_level_df_dm)})"))) 
# %>% 
  # flextable::save_as_docx(path = file.path(article_table_path, "main_methods.docx"))
```

```{r}
# Adding a variable 

all_criteria_df <- main_methods_df %>% 
  bind_cols(correct_adjustment_df[, c("correct_adjustment")]) %>% 
  bind_cols(variables_selection_df[, c("statistics_ipd", "imbalance", "justification_char")]) %>% 
  mutate(all_criteria = (systematic_review_yn == "Yes" & 
                                 primary_outcome_yn == "Yes" & 
                                 ss_ipd_yn == "Yes" & 
                                 ss_nonipd_yn == "Yes" & 
                                 ss_adjusted_yn == "Yes" &
                                 correct_adjustment == "Yes" & 
                                 justification_char %in% c("A priori medical based only")), 
         none = (systematic_review_yn == "No" & 
                   primary_outcome_yn == "No" & 
                   ss_ipd_yn == "No" & 
                   ss_nonipd_yn == "No" & 
                   ss_adjusted_yn == "No" &
                   correct_adjustment == "No" & 
                   !justification_char %in% c("A priori medical based only"))
  )
  
```


### Sample Size comparison 

```{r PAIC reporting one sample size}
main_methods_df[, c("ss_ipd_yn", "ss_nonipd_yn", "ss_adjusted_yn")] %>% 
  apply(2, function(x) ifelse(x == "Yes", TRUE, FALSE), simplify = TRUE) %>% 
  apply(1, all) %>% sum()
```


```{r}
wide_sample_size_df %>%
  left_join(comparison_level_df_dm[, c("doi", "n_itc", "paic_type")]) %>% 
  set_labels(c(ss_total_ipd = "IPD SS",
             ss_total_nonipd = "Aggregated SS", 
             ss_adjusted_total_ipd = "Adjusted SS", 
             difference_adjusted_total = "IPD-adjusted SS Difference", 
             rapport_adjusted_total = "Rapport IPD/adjusted SS", 
             reduction_ess_percent = "Reduction Percentage ESS")) %>% 
  mutate(reduction_ess_percent = round(reduction_ess_percent, 1)) %>% 
  tableby( paic_type ~ ss_total_ipd + ss_total_nonipd + ss_adjusted_total_ipd + reduction_ess_percent,
           data = ., numeric.stats = c("Nmiss", "meansd", "median", "range", "q1q3")) %>% 
  tableby_to_flextable(MAIC, STC, `ML-NMR`, Total) %>% 
  format_flextable() %>% 
  set_header_labels(values = c(
    "Total" = glue("Total (n = {nrow(comparison_level_df_dm)})"), 
    "MAIC" = glue("MAIC (n = {sum(comparison_level_df_dm$paic_type == 'MAIC')})"), 
    "STC" = glue("STC (n = {sum(comparison_level_df_dm$paic_type == 'STC')})"), 
    "ML-NMR" = glue("ML-NMR (n = {sum(comparison_level_df_dm$paic_type == 'ML-NMR')})"))) 
# %>% 
  # flextable::save_as_docx(path = file.path(article_table_path, "sample_size.docx"))

wide_sample_size_df %>% 
  left_join(comparison_level_df_dm[, c("doi", "n_itc", "paic_type")]) %>% 
  left_join(publication_date_df) %>% 
  mutate(before_2018 = publication_date < as.Date("2018-01-01"), 
         before_2017 = publication_date < as.Date("2017-01-01"),
         before_jul_2017 = publication_date < as.Date("2017-07-01")) %>% 
  filter(paic_type == "MAIC") %>% 
  tableby(I(is.na(ss_adjusted_total_ipd)) ~ before_2018 + before_2017 + before_jul_2017, data = .) %>% 
  summary(text = TRUE)
```



### Combining main methodological aspects (table summary Saint Malo)


```{r}
df_main_methods <- main_methods %>%
  dm_tableby(Total) %>% 
  fill(variable) %>% 
  mutate(modalities = ifelse(variable %in% c("IPD", "Non IPD", "Adjusted") & modalities == "Yes", 
                             variable, 
                             modalities), 
         variable = ifelse(variable %in% c("IPD", "Non IPD", "Adjusted"), "Sample size reporting", variable),
         variable = ifelse(duplicated(variable), NA, variable), 
         across(everything(), .fns = replace_na, replace = "")
  ) %>% 
  filter(variable != "" | !modalities %in% c("", "No")) 
```



```{r}
df_variables_justification <- variables_justification %>% 
  dm_tableby(Total) %>% 
  fill(variable) %>% 
  mutate(modalities = case_when(
    modalities == "TRUE" ~ "Yes", 
    modalities == "FALSE" ~ "No", 
    TRUE ~ modalities)) %>% 
  filter(is.na(modalities) | modalities != "No", 
         variable == "Covariates justification") %>% 
  mutate(variable = ifelse(duplicated(variable), NA, variable), 
         across(everything(), .fns = replace_na, replace = "")
  )  

```


```{r}
df_correct_adjustment <- correct_adjustment %>% 
  dm_tableby(Total) %>% 
  fill(variable) %>% 
  mutate(variable = ifelse(duplicated(variable), NA, variable), 
         across(everything(), .fns = replace_na, replace = "")
  )  
```

```{r}
df_poster <- bind_rows(df_main_methods, df_variables_justification, df_correct_adjustment)
indic_hlines <- which(df_poster$variable != "") 
# indic_hlines <- indic_hlines[2: length(indic_hlines)]
ncols <- ncol(df_poster)
df_poster %>% 
  mutate(variable = ifelse(variable == "", NA, variable)) %>% 
  fill(variable, .direction = "down") %>% 
  filter(modalities != "") %>% 
  kbl(format = "latex", booktabs = TRUE, col.names = NULL) %>%
    kable_styling(latex_options = c("basic"),
                  position = "left", 
                  font_size = 8) %>%
  column_spec(1, width = "12em", bold = TRUE) %>%
  column_spec(2, width = "17em") %>%
  column_spec(3, width = "5em") %>% 
  collapse_rows(columns = 1, latex_hline = "major") %>% 
  row_spec(1, hline_after = TRUE) %>%
  add_header_above(c("Count (%)" = 3), align = 'r')
```


### Secondary methodological aspects

```{r}
#TODO: rajouter aspect sur l'échelle de la comparaison
secondary_methods <- comparison_level_df_dm %>% 
  select(outcome_variable_type, contrast_effect_type, 
         scale_choice_yn, adjustment_model_details_yn) %>% 
  tableby( ~ ., data = .)
```

```{r}
summary(secondary_methods)
```

```{r}
secondary_methods %>% 
  tableby_to_flextable(Total) %>% 
  format_flextable() %>% 
  set_header_labels(values = c("Total" = glue("Total (n={nrow(comparison_level_df_dm)})"))) 
# %>% 
  # save_as_docx(secondary_methods, path = file.path(article_table_path, "secondary_methods.docx"))
```


### Adjustment variables

```{r}
adjustment_variables <- covariates_adjustment_df %>% 
  left_join(comparison_level_df_dm[, c("doi", "n_itc", "covariates_n")]) %>%
  select(covariates_n, everything(), -doi, -n_itc) %>% 
  mutate(across(where(is.logical), .fns = ~ ifelse(.x == TRUE, "Yes", "No"))) %>% 
  tableby( ~ ., data = ., control = tableby.control(numeric.stats = c("Nmiss", "median", "q1q3", "range", "meansd")))
```

```{r}
adjustment_variables %>% summary()
```

```{r}
adjustment_variables %>% 
  set_labels(c("age" = "Age", "sex" = "Sex", "others" = "Others",
               "history" = "Medical history", "comorbidities" = "Comorbidities", 
               "performance_score" = "Performance score",
               "past_treatments" = "Past Treatments",
               "race_ethnicity" = "Race/Ethnicity")) %>% 
  tableby_to_flextable(Total) %>% 
  format_flextable() %>% 
  set_header_labels(values = c("Total" = glue("Total (n={nrow(covariates_adjustment_df)})"))) 
# %>% 
  # save_as_docx(path = file.path(article_table_path, "adjustment_variables.docx"))
```




## Comparisons level: results


### Results at the comparison level

```{r}
results_tableby <- comparison_level_df_dm %>% 
  select(unadjusted_yn, adjusted_yn, weights_yn, outcome_variable_type, contrast_effect_type,
         reduction_ess_percent, perc_change_effect) %>% 
  mutate(across(where(is.logical), .fn = ~ ifelse(.x == TRUE, "Yes", "No"))) %>% 
  set_labels(value = c("unadjusted_yn" = "Reporting an unadjusted effect size", 
                       "adjusted_yn" = "Reporting an adjusted effect size", 
                       "reduction_ess_percent" = "ESS reduction percentage (MAIC)", 
                       "perc_change_effect" = "Effect size change in percentage")) %>% 
  tableby( ~ ., data = ., 
           control = tableby.control(numeric.stats = c("Nmiss", "median", "q1q3","range", "meansd")))
summary(results_tableby, text = TRUE)
```

```{r}
results_tableby %>% 
  tableby_to_flextable(Total) %>% 
  format_flextable() %>% 
  set_header_labels(values = c("Total" = glue("Total (n={nrow(comparison_level_df_dm)})")))
# %>% 
  # save_as_docx(path = file.path(article_table_path, "results_tableby.docx"))
```

### Results at the adjustment level

```{r Adjustment level results}
adjustment_level_tableby <- adjustment_level_df %>% 
  filter(adjustment == "adjusted") %>% 
  mutate(significant = ifelse(is.na(effect) | is.na(significant), "Unknown", significant)) %>% 
  select(significant, benefit_ipd) %>% 
  set_labels(value = c("benefit_ipd" = "Benefit IPD")) %>% 
  tableby(significant ~ benefit_ipd, data = .)
```

```{r}
adjustment_level_tableby %>% 
  tableby_to_flextable("Unknown", "FALSE", "TRUE", "Total") %>% 
  format_flextable() %>% 
  set_header_labels(values = c("FALSE" = "Not statistically significant", 
                               "TRUE" = "Statistically significant",
                               "Total" = "Total")) 
# %>% 
  # merge_v(j = 1, target = "strata.term") %>% 
  # save_as_docx(path = file.path(article_table_path, "adjustement_level.docx"))
  
```

## Figures 

### Treatment 

```{r, fig.height = 18}
ttt_df %>% 
  mutate(ipd_yn = tolower(ipd_yn) %>% factor(levels = c("yes", "no"))) %>% 
  #TODO: fix the NA issue
  filter(!is.na(ipd_yn)) %>% 
  distinct(doi, n_itc, treatment_name, ipd_yn) %>% 
  left_join(distinct(ttt_mapped[, c("treatment_name", "concept_name_ancestor_ATC 1st", "concept_name_ancestor_ATC 2nd", "concept_name_ancestor_ATC 3rd", "car_t_cells")]),
            by = "treatment_name",
            multiple = "all") %>%
  group_by(ipd_yn) %>% 
  count(`concept_name_ancestor_ATC 1st`) %>% 
  ggplot(aes(x = reorder(`concept_name_ancestor_ATC 1st`, n), y = n, label = n)) +
  geom_bar(stat = "identity") +
  geom_label() +
  coord_flip() +
  facet_wrap(c("ipd_yn"), labeller = labeller("ipd_yn" = c("no" = "Non IPD", "yes" = "IPD"))) +
  labs(title = "Treatments compared", 
       subtitle = "ATC classification level 2") +
  theme(axis.text = element_text(size = 16), 
        strip.text = element_text(size = 18), 
        plot.title = element_text(size = 22), 
        plot.subtitle = element_text(size = 20))
```


```{r Sample size reduction, fig.width = 14}

sample_size_labels <- c(
  Rapport = "Rapport ESS/Original",
  Difference = "Difference Original - ESS", 
  Original = "Original Sample Size", 
  `Adjusted (ESS)` = "ESS"
)

long_sample_size_df %>% 
  filter(ipd_yn == "Total", 
         paic_type == "MAIC") %>%
  mutate(sample_size_type = factor(sample_size_type,
                                   levels = c("Original", "Adjusted (ESS)", "Difference", "Rapport"), 
                                   labels = c("Original Sample Size", "ESS", "Difference Original - ESS", 
                                              "Rapport ESS/Original"))) %>% 
  ggplot(aes(x = 1, y = value)) +
  geom_violin() + 
  geom_jitter(width = 0.2) + 
  facet_wrap(~ sample_size_type,
             scales = "free",
             ncol = 4) +
  theme(legend.position = "bottom", legend.direction = "horizontal", axis.ticks =  element_blank()) +
  labs(title = "Sample Size Reduction in MAIC", 
       y = "Sample Size", 
       x = NULL)

```


### Outcomes 

```{r, results='asis'}
funded_pharma <- general_information_df %>% select(doi, )

comparison_level_df  %>% 
  mutate(across(.cols = c(outcome_short_name, outcome_name), 
                .fns = stringr::str_to_title)
  ) %>% 
  add_count(outcome_name, name = "outcome_name_n") %>% 
  mutate(outcome_name = forcats::fct_reorder(outcome_name,
                                             outcome_name_n, 
                                             .desc = TRUE)) %>% 
 # TODO : fix missing outcome name 
  tableby( primary_outcome_yn ~  outcome_variable_type + outcome_short_name,
           data = .) %>% 
  summary()
```

### Treatment effect estimates

```{r, eval = FALSE}
adjustment_level_df %>%
  #TODO: see what is the best to do with contrast == NA
  filter(!is.na(contrast_effect_type)) %>%
  ggplot(aes(x = adjustment, y = effect, color = significant)) +
  geom_jitter(width = 0.1) +
  geom_hline(aes(yintercept = effect_cutoff), linetype = "dashed", color = "black") +
  facet_wrap(~ contrast_effect_type, scales = "free_y") +
  scale_y_continuous(trans = "log10") +
  labs(title = "Treatment contrast effects: point estimates",
       subtitle = "IPD is numerator for rates/ratio, left side differences",
       y = "Estimate",
       x = NULL
  )


```

```{r}
adjustment_level_df %>% 
  left_join(ties_w_pharma_df, by = "doi") %>% 
  filter(adjustment == "adjusted", significant == "TRUE", ties_pharma, !benefit_ipd)
```


## Results benefit IPD
```{r, results='asis'}
adjustment_level_df %>% 
  left_join(ties_w_pharma_df, by = "doi") %>% 
  tableby(benefit_ipd ~ significant, strata = adjustment, data = .) %>% 
  summary(title = "Treatment point estimate benefits IPD") 
```

```{r, fig.width=14, fig.height=12}
outcomes_df <- adjustment_level_df %>% 
  select(doi, n_itc, adjustment, contrast_effect_type, direction_benefit, outcome_short_name, effect_cutoff, significant, benefit_ipd, effect) %>% 
  filter(!is.na(effect)) %>% 
  # Creating a variable where a beneficial effect for IPD is always inferior to threshold
  mutate(effect_benefit = case_when(
    direction_benefit == "superior" & effect_cutoff == 0 ~ -effect, 
    direction_benefit == "superior" & effect_cutoff == 1 ~ 1/effect,
    TRUE ~ effect,
  ), 
  significant_char = case_when(
    significant == "TRUE" ~ "Yes",
    significant == "FALSE" ~ "No", 
    is.na(significant) ~ "Unknown")) 

num_comparison_df <- outcomes_df %>% 
  distinct(n_itc, doi, contrast_effect_type) %>% 
  group_by(contrast_effect_type) %>% 
  mutate(num_comparison = 1:n()) %>% 
  ungroup()

outcomes_df <- outcomes_df %>% 
  left_join(num_comparison_df)
```


```{r, fig.width=14, fig.height=12}
labelling_data <- data.frame(
  contrast_effect_type = unique(outcomes_df$contrast_effect_type), 
  left_side = "Favors IPD", 
  right_side = "Favors non-IPD"
) %>%
  left_join(distinct(outcomes_df, contrast_effect_type, effect_cutoff)) %>% 
  left_join(summarise(group_by(outcomes_df[, c("contrast_effect_type", "effect", "num_comparison")], contrast_effect_type),
                      left_x = min(effect), 
                      right_x = max(effect), 
                      max_num_comparison = max(num_comparison)))
```


```{r, fig.width=14, fig.height=16}
outcomes_df %>% 
  ggplot(aes(x = effect_benefit, y = num_comparison, color = significant_char, shape = adjustment)) + 
  geom_point(size = 3) +
  geom_vline(aes(xintercept = effect_cutoff), linetype = "dashed", color = "black") +
  # geom_blank(aes(y = max_num_comparison * 1.1, x = 3), inherit.aes = FALSE, data = labelling_data) +
  scale_color_manual(values = c("Yes" = "#cc0000", "No" = "#000000", "Unknown" = "#D9D9D9")) +
  facet_wrap(~ contrast_effect_type, scales = "free") + 
  labs(title = "PAITC treatment effects point estimates", 
       subtitle = "Left side of vertical dashed line favors IPD", 
       color = "5% significance level", 
       shape = "Adjustment",
       x = "Treatment effect point estimate", 
       y = NULL) +
  theme(legend.position = "bottom",
        text = element_text(size = 14),
        axis.text.y = element_blank(),
        axis.text = element_text(size = 14), 
        axis.title = element_text(size = 16), 
        plot.title = element_text(size = 20), 
        plot.subtitle = element_text(size = 18, face = c("bold.italic")), 
        legend.text = element_text(size = 16),
        legend.box.just = "top",
        legend.box = "vertical") + 
  guides(shape = guide_legend(override.aes = list(color = "black")))
```



```{r }
outcomes_df %>% 
  filter(adjustment == "adjusted") %>% 
  ggplot(aes(x = adjustment,
             y = effect_benefit,
             # shape = adjustment
             )) + 
  # geom_violin() +
  geom_boxplot(fill = "white", outlier.shape = NA, width = 0.5) +
  geom_jitter(aes(color = significant_char), size = 1, width = 0.05, alpha = 0.7) +
 geom_hline(aes(yintercept = effect_cutoff), linetype = "dashed", color = "black") +
  # geom_blank(aes(y = max_num_comparison * 1.1, x = 3), inherit.aes = FALSE, data = labelling_data) +
  # scale_color_manual(values = c("Yes" = "#cc0000", "No" = "#000000", "Unknown" = "#D9D9D9")) +
  facet_wrap( ~ contrast_effect_type, scales = "free", ncol = 1) + 
  coord_flip() + 
  labs(title = "PAITC treatment effects point estimates", 
       subtitle = "Left side of vertical dashed line favors IPD treatment", 
       color = "5% significance level", 
       shape = "Adjustment",
         y = "Relative treatment effect estimate", 
       x = NULL) +
  theme(legend.position = "right",
        # text = element_text(size = 14),
        axis.text.y = element_blank(),
        # axis.text = element_text(size = 14), 
        # axis.title = element_text(size = 16), 
        # plot.title = element_text(size = 20), 
        plot.subtitle = element_text(face = c("bold.italic")), 
        # legend.text = element_text(size = 16),
        legend.box.just = "top",
        legend.box = "horizontal") + 
  guides(shape = guide_legend(override.aes = list(color = "black")))
```

```{r}
plot_layout <- outcomes_df %>%   
  left_join(
    wide_sample_size_df %>% 
      mutate(ss_total_ipd = ifelse(anchored_yn == "Yes", ss_total_ipd/2, ss_total_ipd)) %>% 
      select(doi, n_itc, ss_total_ipd), 
    by = c("doi", "n_itc")
  ) %>% 
  filter(adjustment == "adjusted", 
         contrast_effect_type == "Relative difference") %>% 
  # mutate(contrast_effect_type = factor(contrast_effect_type, 
  #                                      levels = c("Difference", "Rates/ratio"), 
  #                                      labels = c("Mesure de l'effet : différence absolue", 
  #                                                 "Mesure de l'effet : rates/ratio"))) %>% 
  ggplot(aes(x = effect_benefit, y = ss_total_ipd, color = significant_char)) + 
  scale_x_continuous(trans = "log10",
                     breaks = c(0.01, 0.1, 1, 10, 100),
                     labels = c("0,01", "0,1", "1", "10", "100")) +
  scale_y_continuous(trans = "log10") +
  scale_color_manual(labels = c("Yes" = "Oui", "No" = "Non", "Unknown" = "Inconnu"),
                       limits = c("Yes", "No", "Unknown"), 
                       values = c("Yes" = "#E84646", "No" = "#65ADC2", "Unknown" = "#233B43")) +
  # labs(title = "Estimation de l'effet de traitement, ajustée via PAIC (rapports et ratio)", 
  #      subtitle = "Côté gauche de la ligne verticale en pointillée montre un effet en faveur du traitement \navec données individuelles", 
  #      color = "Effet statistiquement \nsignificatif (alpha = 5%)", 
  #      y = "Taille échantillon bras traitement données ind.", 
  #      x = "\nTaille d'effet") +
  # theme(legend.position = "bottom",
  #       axis.title = element_text(size = 10),
  #       legend.title = element_text(size = 10),
  #       plot.subtitle = element_text(size = 10, face = c("bold.italic")), 
  #       plot.title = element_text(size = 13),
  #       legend.box.just = "top",
  #       legend.box = "vertical") + 
  guides(shape = guide_legend(override.aes = list(color = "black"))) +
  geom_vline(aes(xintercept = effect_cutoff), linetype = "dashed", color = "black")

```

```{r Publication Saint-Malo}

plot_layout +
  geom_point(size = 3/2) +
  scale_color_manual(values = c("No" = "#1c2474", "Yes" = "#ec342b", "Unknown" ="#bbbdd3")) +
  # scale_color_manual(values = c("No" = "#1055A4", "Yes" = "#ec342b", "Unknown" ="#bbbdd3")) +
  coord_cartesian(xlim = c(0.01, 100), ylim = c(20, NA), clip = "off", expand = TRUE) +
  annotate("text", label = "\n\nFavors AgD study intervention", x = 10, y = 6, size = 6/2) +
  # geom_segment(aes(x = 1.2, xend = 90, y = 2.75, yend = 2.75),  # for poster
  geom_segment(aes(x = 1.2, xend = 90, y = 5, yend = 5),
               linewidth = 0.7/2,
               arrow = arrow(length = unit(0.2,"cm")),
               inherit.aes = FALSE) +
  annotate("text", label = "\n\nFavors IPD study intervention", x = 0.1, y = 6, size = 6/2) +
  geom_segment(aes(x = 0.82, xend = 0.011, y = 5, yend = 5),
               linewidth = 0.7/2,
               arrow = arrow(length = unit(0.2,"cm")),
               inherit.aes = FALSE) +
  theme(axis.title = element_text(size = 14/1.3),
        axis.text = element_text(size = 16/2),
        legend.title = element_text(size = 13/1.3),
        legend.text = element_text(size = 13/1.3),
        plot.title = element_text(size = 14/2),
        plot.subtitle = element_text(size = 15/2, face = "bold.italic"),
  # theme(axis.title = element_text(size = 14),
  #       axis.text = element_text(size = 16),
  #       legend.title = element_text(size = 13),
  #       legend.text = element_text(size = 13),
  #       plot.title = element_text(size = 14),
  #       plot.subtitle = element_text(size = 15, face = "bold.italic"),
        legend.position = "bottom",
        legend.box.just = "top",
        legend.box = "vertical", 
        # text = element_text(family = "Goudy Old Style", face = "bold")
        ) +
  # labs(title = "PAIC adjusted treatment effect", 
  labs(title = NULL, 
       subtitle = NULL, 
       y = "IPD treatment arm sample size",
       x = "Effect size\n", 
       color = latex2exp::TeX(sprintf(r'(Significant ($\alpha = 0.05$) )'), 
                              bold = TRUE), 
       )  +
  theme(rect = element_rect(fill = "transparent"),
    # panel.background = element_rect(fill='transparent'), #transparent panel bg
    # plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
    panel.grid.major = element_blank(), #remove major gridlines
    panel.grid.minor = element_blank() #remove minor gridlines
    # legend.background = element_rect(fill='transparent'), #transparent legend bg
    # legend.box.background = element_rect(fill='transparent') #transparent legend panel
)

# ggsave("C:/Users/aserret-larmande/Documents/these/research/articles_redaction/paic_methodological_review/Posters st-malo/figures/scatter_plot.png", width = 20, height = 10, unit = "cm")
# ggsave("C:/Users/aserret-larmande/Documents/these/research/articles_redaction/paic_methodological_review/figures/ratio_treatment_effect.png", width = 24, height = 13.5, unit = "cm")
# ggsave("C:/Users/aserret-larmande/Documents/these/research/articles_redaction/paic_methodological_review/figures/ratio_treatment_effect.tiff", width = 13, height = 9, unit = "cm")
ggsave("C:/Users/aserret-larmande/Documents/these/research/articles_redaction/paic_methodological_review/figures/ratio_treatment_effect_2.png", width = 13, height = 9, unit = "cm", bg = "transparent")
```



```{r}
# plot_layout +
#   geom_boxplot(aes(x = effect_benefit, y = significant_char), fill = "white", outlier.shape = NA, width = 0.2) +
#   scale_y_discrete()
# ggsave("test.png")

```


```{r}
outcomes_df %>% 
  filter(adjustment == "adjusted") %>% 
  mutate(contrast_effect_type = factor(contrast_effect_type, 
                           levels = c("Difference", "Rates/ratio"), 
                           labels = c("Mesure de l'effet : différence absolue", 
                                      "Mesure de l'effet : rates/ratio"))) %>% 
  ggplot(aes(x = adjustment,
             y = effect_benefit,
             # shape = adjustment
             )) + 
  geom_boxplot(fill = "white", outlier.shape = NA, width = 0.5) +
  geom_jitter(aes(color = significant_char), size = 1, width = 0.05, alpha = 0.7) +
  geom_hline(aes(yintercept = effect_cutoff), linetype = "dashed", color = "black") +
  # geom_blank(aes(y = max_num_comparison * 1.1, x = 3), inherit.aes = FALSE, data = labelling_data) +
  # scale_color_manual(values = c("Yes" = "#cc0000", "No" = "#000000", "Unknown" = "#D9D9D9")) +
  facet_wrap( ~ contrast_effect_type, scales = "free", ncol = 1) + 
  coord_flip() + 
  scale_color_discrete(labels = c("Non", "Inconnu", "Oui")) + 
  labs(title = "Estimation de l'effet de traitement, ajustée via PAITC", 
       subtitle = "Côté gauche de la ligne verticale en pointillée montre un \neffet en faveur du traitement avec données individuelles", 
       color = "Effet statistiquement \nsignificatif (alpha = 5%)", 
       y = "Effet de traitement relatif", 
       x = NULL) +
  theme(legend.position = "right",
        axis.text.y = element_blank(),
        plot.subtitle = element_text(face = c("bold.italic")), 
        legend.box.just = "top",
        legend.box = "horizontal") + 
  guides(shape = guide_legend(override.aes = list(color = "black")))
# ggsave(filename = "boxplot_effet_fr.png")
```



```{r, fig.width=14, fig.height=16}
outcomes_plot <- outcomes_df %>% 
  # select(num_comparison, contrast, effect_cutoff, adjustment, effect) %>% 
  # Keeping only data with both unadjusted and adjusted effect
  pivot_wider(id_cols = c(num_comparison, contrast_effect_type),
              names_from = adjustment,
              values_from = effect) %>%
  filter(!is.na(adjusted) & ! is.na(unadjusted)) %>%
  pivot_longer(cols = c("adjusted", "unadjusted"), names_to = "adjustment", values_to = "effect") %>% 
  left_join(outcomes_df[, c("num_comparison", "contrast_effect_type", "adjustment", "significant_char", "effect_cutoff")], 
            by = c("num_comparison", "contrast_effect_type", "adjustment")) %>% 
  ggplot() + 
  geom_point(aes(y = num_comparison,
             color = significant_char, 
             x = effect,
             shape = adjustment,
             group = adjustment), size = 3) + 
  geom_line(aes(y = num_comparison,
             x = effect,
             group = num_comparison), size = 0.5, color = "darkgrey", linetype = 1) +
  geom_vline(aes(xintercept = effect_cutoff), linetype = "dashed", color = "black") +
  scale_color_manual(values = c("Yes" = "#cc0000", "No" = "#000000", "Unknown" = "#D9D9D9")) + 
  facet_wrap(~ contrast_effect_type, scales = "free") + 
  # facet_zoom(xlim = c(-2, 2)) +
  labs(title = "PAITC: distance between adjusted and not-adjusted treatment effects point estimates", 
       subtitle = "Vertical dashed lines represent absence of treatment effect difference",
       color = "5% significance level", 
       shape = "Adjustment",
       x = "Treatment effect point estimate", 
       y = NULL) +
  theme(legend.position = "bottom",
        axis.text.y = element_blank(),
        text = element_text(size = 14),
        axis.text = element_text(size = 14), 
        axis.title = element_text(size = 16), 
        plot.title = element_text(size = 20), 
        plot.subtitle = element_text(size = 18, face = c("bold.italic")), 
        legend.text = element_text(size = 16),
        legend.box.just = "top",
        legend.box = "vertical") + 
  guides(shape = guide_legend(override.aes = list(color = "black")))
outcomes_plot
```


```{r}
# library("ggforce")
# library("patchwork")
# plot1 <-  outcomes_df %>% 
#   # select(num_comparison, contrast, effect_cutoff, adjustment, effect) %>% 
#   # Keeping only data with both unadjusted and adjusted effect
#   pivot_wider(id_cols = c(num_comparison, contrast),
#               names_from = adjustment,
#               values_from = effect) %>%
#   filter(!is.na(adjusted) & ! is.na(unadjusted), 
#          contrast == "Rates: OR/RR/means ratio") %>%
#   pivot_longer(cols = c("adjusted", "unadjusted"), names_to = "adjustment", values_to = "effect") %>% 
#   left_join(outcomes_df[, c("num_comparison", "contrast", "adjustment", "significant_char", "effect_cutoff")], 
#             by = c("num_comparison", "contrast", "adjustment")) %>% 
#   ggplot() + 
#    geom_point(aes(y = num_comparison,
#                   color = significant_char, 
#                   x = effect,
#                   shape = adjustment,
#                   group = adjustment), size = 3) + 
#    geom_line(aes(y = num_comparison,
#                  x = effect,
#                  group = num_comparison), size = 0.5, color = "darkgrey", linetype = 1) +
#    geom_vline(aes(xintercept = effect_cutoff), linetype = "dashed", color = "black") +
#    scale_color_manual(values = c("Yes" = "#cc0000", "No" = "#000000", "Unknown" = "#D9D9D9")) +
#    facet_zoom(xlim = c(0, 6)) +
#    # facet_wrap(~ contrast, scales = "free") + 
#    labs(title = "", 
#         subtitle = "Rates: OR/RR/means ratio",
#         color = "5% significance level", 
#         shape = "Adjustment",
#         x = "Treatment effect point estimate", 
#         y = NULL) +
#    theme(legend.position = "bottom",
#          axis.text.y = element_blank(),
#          text = element_text(size = 14),
#          axis.text = element_text(size = 14), 
#          axis.title = element_text(size = 16), 
#          plot.title = element_text(size = 20), 
#          plot.subtitle = element_text(size = 18, face = c("bold.italic")), 
#          legend.text = element_text(size = 16),
#          legend.box.just = "top",
#          legend.box = "vertical") + 
#    guides(shape = guide_legend(override.aes = list(color = "black")))  +
#   theme(strip.background = element_rect(fill = "grey"))
# 
# plot2 <- outcomes_df %>% 
#   # select(num_comparison, contrast, effect_cutoff, adjustment, effect) %>% 
#   # Keeping only data with both unadjusted and adjusted effect
#   pivot_wider(id_cols = c(num_comparison, contrast),
#               names_from = adjustment,
#               values_from = effect) %>%
#   filter(!is.na(adjusted) & ! is.na(unadjusted), 
#          contrast == "Means/medians difference") %>%
#   pivot_longer(cols = c("adjusted", "unadjusted"), names_to = "adjustment", values_to = "effect") %>% 
#   left_join(outcomes_df[, c("num_comparison", "contrast", "adjustment", "significant_char", "effect_cutoff")], 
#             by = c("num_comparison", "contrast", "adjustment")) %>% 
#   ggplot() + 
#    geom_point(aes(y = num_comparison,
#                   color = significant_char, 
#                   x = effect,
#                   shape = adjustment,
#                   group = adjustment), size = 3) + 
#    geom_line(aes(y = num_comparison,
#                  x = effect,
#                  group = num_comparison), size = 0.5, color = "darkgrey", linetype = 1) +
#    geom_vline(aes(xintercept = effect_cutoff), linetype = "dashed", color = "black") +
#    scale_color_manual(values = c("Yes" = "#cc0000", "No" = "#000000", "Unknown" = "#D9D9D9")) +
#    facet_zoom(xlim = c(-3, 3)) +
#    # facet_wrap(~ contrast, scales = "free") + 
#    labs(title = "", 
#         subtitle = "Means/medians difference",
#         color = "5% significance level", 
#         shape = "Adjustment",
#         x = "Treatment effect point estimate", 
#         y = NULL) +
#    theme(legend.position = "bottom",
#          axis.text.y = element_blank(),
#          text = element_text(size = 14),
#          axis.text = element_text(size = 14), 
#          axis.title = element_text(size = 16), 
#          plot.title = element_text(size = 20), 
#          plot.subtitle = element_text(size = 18, face = c("bold.italic")), 
#          legend.text = element_text(size = 16),
#          legend.box.just = "top",
#          legend.box = "vertical") + 
#    guides(shape = guide_legend(override.aes = list(color = "black"))) +
#   theme(strip.background = element_rect(fill = "grey"))
```


```{r, fig.height=14, fig.width=12}
# plot1 + plot2
```



# Additional criteria 

```{r}
df <- readr::read_csv("data/inclusion_criteria.csv")

with(df, {
  print(table(inclusion_criteria_mention))
  print(table(inclusion_criteria_mention)  %>% prop.table())
  print(table(adjustment_for_inclusion_criteria, useNA = "always"))
  print(table(adjustment_for_inclusion_criteria, useNA = "always") %>% prop.table()  )
})
```

